//
//  Clients.ts
//
//  Generated by Poll Castillo on 15/02/2023
//
import { deleteEntity, getEntityData, getUserInfo, registerEntity, setPassword, setUserRole, updateEntity, sendMail, getFilterEntityData, getFilterEntityCount } from "../../../endpoints.js"
import { drawTagsIntoTables, inputObserver, inputSelect, CloseDialog, filterDataByHeaderType, getVerifyEmail, getVerifyUsername, pageNumbers, fillBtnPagination, userPermissions, currentDateTime, eventLog, getSearch, getNothing } from "../../../tools.js"
import { Data, InterfaceElement } from "../../../types.js"
import { Config } from "../../../Configs.js"
import { UIConvertToSU, tableLayout } from "./Layout.js"
import { tableLayoutTemplate } from "./Templates.js"
import { exportSupervisorCsv, exportSupervisorXls } from "../../../exportFiles/supervisors.js"
//import { exportClientCsv, exportClientPdf, exportClientXls } from "../../../exportFiles/clients.js"

const tableRows = Config.tableRows
const currentPage = Config.currentPage
const businessId = localStorage.getItem('business_id')
let currentUserInfo : any
let infoPage = {
    count: 0,
    offset: Config.offset,
    currentPage: currentPage,
    search: ""
}
let dataPage: any
const getUsers = async (): Promise<void> => {
    const currentUser = await getUserInfo()
    currentUserInfo = await getEntityData('User', `${currentUser.attributes.id}`)

    //const users: Data = await getEntitiesData('User')
    //const FSuper: Data = users.filter((data: any) => data.isSuper === false)
    //const FCustomer: Data = FSuper.filter((data: any) => `${data.customer?.id}` === `${customerId}`)
    //const data: Data = FCustomer.filter((data: any) => `${data.userType}`.includes('CUSTOMER'))
    let raw = JSON.stringify({
        "filter": {
            "conditions": [
              {
                "property": "business.id",
                "operator": "=",
                "value": `${businessId}`
              },
              {
                "property": "userType",
                "operator": "=",
                "value": `GUARD`
              },
              {
                "property": "isSuper",
                "operator": "=",
                "value": `${false}`
              },
              {
                "property": "isSupervisor",
                "operator": "=",
                "value": `${true}`
              }
            ],
            
        }, 
        sort: "-createdDate",
        limit: Config.tableRows,
        offset: infoPage.offset,
        fetchPlan: 'full',
        
    })
    if(infoPage.search != ""){
        raw = JSON.stringify({
            "filter": {
                "conditions": [
                  {
                    "group": "OR",
                    "conditions": [
                      {
                        "property": "dni",
                        "operator": "contains",
                        "value": `${infoPage.search.toLowerCase()}`
                      },
                      {
                        "property": "firstName",
                        "operator": "contains",
                        "value": `${infoPage.search.toLowerCase()}`
                      },
                      {
                        "property": "lastName",
                        "operator": "contains",
                        "value": `${infoPage.search.toLowerCase()}`
                      },
                      {
                        "property": "secondLastName",
                        "operator": "contains",
                        "value": `${infoPage.search.toLowerCase()}`
                      },
                      {
                        "property": "username",
                        "operator": "contains",
                        "value": `${infoPage.search.toLowerCase()}`
                      },
                      {
                        "property": "email",
                        "operator": "contains",
                        "value": `${infoPage.search.toLowerCase()}`
                      }
                    ]
                  },
                  {
                    "property": "business.id",
                    "operator": "=",
                    "value": `${businessId}`
                  },
                  {
                    "property": "userType",
                    "operator": "=",
                    "value": `GUARD`
                  },
                  {
                    "property": "isSuper",
                    "operator": "=",
                    "value": `${false}`
                  },
                  {
                    "property": "isSupervisor",
                    "operator": "=",
                    "value": `${true}`
                  }
                ]
              },
            sort: "-createdDate",
            limit: Config.tableRows,
            offset: infoPage.offset,
            fetchPlan: 'full',
            
        })
    }
    infoPage.count = await getFilterEntityCount("User", raw)
    dataPage = await getFilterEntityData("User", raw)
    return dataPage
}

export class Supervisors {
    private readonly dialogContainer: InterfaceElement =
        document.getElementById('app-dialogs')

    private readonly entityDialogContainer: InterfaceElement =
        document.getElementById('entity-editor-container')

    private readonly datatableContainer: InterfaceElement =
        document.getElementById('datatable-container')

    public async render(offset: any, actualPage: any, search: any): Promise<void> {
        infoPage.offset = offset
        infoPage.currentPage = actualPage
        infoPage.search = search
        this.datatableContainer.innerHTML = ''
        this.datatableContainer.innerHTML = tableLayout
        const tableBody: InterfaceElement = document.getElementById('datatable-body')
        tableBody.innerHTML = '.Cargando...'

        let data: any = await getUsers()
        tableBody.innerHTML = tableLayoutTemplate.repeat(tableRows)
        this.load(tableBody, currentPage, data)

        this.searchEntity(tableBody/*, data*/)
        new filterDataByHeaderType().filter()
        this.pagination(data, tableRows, infoPage.currentPage)
    }

    private load(table: InterfaceElement, currentPage: number, data: Data) {
        setUserPassword()
        //setRole()
        table.innerHTML = ''
        currentPage--
        let start: number = tableRows * currentPage
        let end: number = start + tableRows
        let paginatedItems: any = data.slice(start, end)

        if (data.length === 0) {
            let row: InterfaceElement = document.createElement('tr')
            row.innerHTML = `
                <td>No hay datos</td>
                <td></td>
                <td></td>
            `
            table.appendChild(row)
        }
        else {
            for (let i = 0; i < paginatedItems.length; i++) {
                let client = paginatedItems[i]
                let row: InterfaceElement =
                    document.createElement('tr')
                row.innerHTML += `
                    <td>${client.firstName} ${client.lastName}</dt>
                    <td>${client.username}</dt>
                    <td class="tag"><span>${client.userState.name}</span></td>
                    <td class="entity_options">
                        <button class="button" id="edit-entity" data-entityId="${client.id}">
                            <i class="fa-solid fa-pen"></i>
                        </button>

                        <button class="button" id="remove-entity" data-entityId="${client.id}" data-entityName="${client.username}" style="display:${userPermissions().style};">
                            <i class="fa-solid fa-trash"></i>
                        </button>
                    </td>
                `
                table.appendChild(row)
                drawTagsIntoTables()
            }
        }

        this.register()
        this.import()
        this.export()
        this.edit(this.entityDialogContainer, data)
        this.remove()
        //this.changeUserPassword()
    }

    public searchEntity = async (tableBody: InterfaceElement/*, data: any*/) => {
        const search: InterfaceElement = document.getElementById('search')
        const btnSearch: InterfaceElement = document.getElementById('btnSearch')
        search.value = infoPage.search
        await search.addEventListener('keyup', async () => {
            /********const arrayData: any = await data.filter((user: any) =>
                `${user.id}
                ${user.firstName}
                 ${user.lastName}
                 ${user.username}`
                    .toLowerCase()
                    .includes(search.value.toLowerCase())
            )

            let filteredResult = arrayData.length
            let result = arrayData
            if (filteredResult >= tableRows) filteredResult = tableRows

            this.load(tableBody, currentPage, result)

            this.pagination(result, tableRows, currentPage)*/

        })
        btnSearch.addEventListener('click', async () => {
            new Supervisors().render(Config.offset , Config.currentPage, search.value.toLowerCase().trim())
        })
    }

    private register() {
        // register entity
        const openEditor: InterfaceElement = document.getElementById('new-entity')
        openEditor.addEventListener('click', (): void => {
            renderInterface('User')
        })

        const renderInterface = async (entities: string): Promise<void> => {
            this.entityDialogContainer.innerHTML = ''
            this.entityDialogContainer.style.display = 'flex'
            this.entityDialogContainer.innerHTML = `
                <div class="entity_editor" id="entity-editor">
                <div class="entity_editor_header">
                    <div class="user_info">
                    <div class="avatar"><i class="fa-regular fa-user"></i></div>
                    <h1 class="entity_editor_title">Registrar <br><small>Supervisor</small></h1>
                    </div>

                    <button class="btn btn_close_editor" id="close"><i class="fa-regular fa-x"></i></button>
                </div>

                <!-- EDITOR BODY -->
                <div class="entity_editor_body">
                    <div class="material_input">
                    <input type="text" id="entity-firstname" autocomplete="none">
                    <label for="entity-firstname"><i class="fa-solid fa-user"></i> Nombre</label>
                    </div>

                    <div class="material_input">
                    <input type="text" id="entity-lastname" autocomplete="none">
                    <label for="entity-lastname"><i class="fa-solid fa-user"></i> Apellido</label>
                    </div>

                    <div class="material_input">
                    <input type="text" id="entity-secondlastname" autocomplete="none">
                    <label for="entity-secondlastname"><i class="fa-solid fa-user"></i> 2do Apellido</label>
                    </div>

                    <div class="material_input">
                    <input type="text"
                        id="entity-dni"
                        maxlength="10" autocomplete="none">
                    <label for="entity-dni"><i class="fa-solid fa-id-card"></i> DNI</label>
                    </div>

                    <div class="material_input">
                    <input type="email"
                        id="entity-email"
                        autocomplete="none">
                    <label for="entity-email">Email</label>
                    </div>

                    <div class="material_input">
                    <input type="text"
                        id="entity-phone"
                        maxlength="10" autocomplete="none">
                    <label for="entity-phone"><i class="fa-solid fa-phone"></i> Teléfono</label>
                    </div>

                    <div class="material_input">
                    <input type="text" id="entity-username" class="input_filled" placeholder="john.doe@ejemplo.com" readonly>
                    <label for="entity-username"><i class="input_locked fa-solid fa-lock"></i> Nombre de usuario</label>
                    </div>

                    <div class="material_input_select">
                    <label for="entity-state">Estado</label>
                    <input type="text" id="entity-state" class="input_select" readonly placeholder="cargando..." autocomplete="none">
                    <div id="input-options" class="input_options">
                    </div>
                    </div>

                    <!--
                    <div class="material_input_select" style="display: none">
                        <label for="entity-business"><i class="fa-solid fa-building"></i> Empresa</label>
                        <input type="text" id="entity-business" class="input_select" readonly placeholder="cargando..." autocomplete="none">
                        <div id="input-options" class="input_options">
                        </div>
                    </div>

                    <div class="material_input_select">
                    <label for="entity-citadel"><i class="fa-solid fa-buildings"></i> Ciudadela</label>
                    <input type="text" id="entity-citadel" class="input_select" readonly placeholder="cargando...">
                    <div id="input-options" class="input_options">
                    </div>
                    </div>

                    <div class="material_input_select" style="display: none">
                    <label for="entity-customer">Cliente</label>
                    <input type="text" id="entity-customer" class="input_select" readonly placeholder="cargando...">
                    <div id="input-options" class="input_options">
                    </div>
                    </div>

                    <div class="material_input_select" style="display: none">
                    <label for="entity-department">Departamento</label>
                    <input type="text" id="entity-department" class="input_select" readonly placeholder="cargando...">
                    <div id="input-options" class="input_options">
                    </div>
                    </div>
                    -->

                    <br>
                    <div class="material_input">
                    <input type="password" id="tempPass" autocomplete="false">
                    <label for="tempPass">Contraseña</label>
                    </div>
                    

                </div>
                <!-- END EDITOR BODY -->

                <div class="entity_editor_footer">
                    <button class="btn btn_primary btn_widder" id="register-entity">Guardar</button>
                </div>
                </div>
            `

            inputObserver()
            //inputSelect('Citadel', 'entity-citadel')
            //inputSelect('Customer', 'entity-customer')
            inputSelect('UserState', 'entity-state')
            //inputSelect('Department', 'entity-department')
            //inputSelect('Business', 'entity-business')
            this.close()
            this.generateUserName()

            const registerButton: InterfaceElement = document.getElementById('register-entity')
            registerButton.addEventListener('click', async() => {
                const inputsCollection: any = {
                    firstName: document.getElementById('entity-firstname'),
                    lastName: document.getElementById('entity-lastname'),
                    secondLastName: document.getElementById('entity-secondlastname'),
                    phoneNumer: document.getElementById('entity-phone'),
                    state: document.getElementById('entity-state'),
                    //customer: document.getElementById('entity-customer'),
                    username: document.getElementById('entity-username'),
                    //citadel: document.getElementById('entity-citadel'),
                    temporalPass: document.getElementById('tempPass'),
                    dni: document.getElementById('entity-dni'),
                    email: document.getElementById('entity-email'),
                }

                const raw = JSON.stringify({
                    "lastName": `${inputsCollection.lastName.value}`,
                    "secondLastName": `${inputsCollection.secondLastName.value}`,
                    "isSuper": false,
                    "newUser": true,
                    "dni": `${inputsCollection.dni.value}`,
                    "email": `${inputsCollection.email.value}`,
                    "temp": `${inputsCollection.temporalPass.value}`,
                    "isWebUser": false,
                    "active": true,
                    "userType": "GUARD",
                    "firstName": `${inputsCollection.firstName.value}`,
                    "state": {
                        "id": "60885987-1b61-4247-94c7-dff348347f93"
                    },
                    "userState": {
                        "id": `${inputsCollection.state.dataset.optionid}`
                    },
                    "business":{
                        "id": `${businessId}`
                    },
                    "phone": `${inputsCollection.phoneNumer.value}`,
                    "username": `${inputsCollection.username.value}@${currentUserInfo.business.name.toLowerCase().replace(/\s+/g, '')}.com`,
                    'creationDate': `${currentDateTime().date}`,
                    'creationTime': `${currentDateTime().time}`,
                    'isSupervisor': true
                })
                //const existEmail = await getVerifyEmail(inputsCollection.email.value)
                const existUsername = await getVerifyUsername(`${inputsCollection.username.value}@${currentUserInfo.business.name.toLowerCase().replace(/\s+/g, '')}.com`)
                if(existUsername != "none"){
                    alert("¡Usuario ya existe, es tipo "+existUsername+"!")
                }/*else if(existEmail == true){
                    alert("¡Correo electrónico ya existe!")
                }*/else if(inputsCollection.firstName.value === '' || inputsCollection.firstName.value === undefined){
                    alert("¡Nombre vacío!")
                }else if(inputsCollection.lastName.value === '' || inputsCollection.lastName.value === undefined){
                    alert("¡Primer apellido vacío!")
                }else if(inputsCollection.secondLastName.value === '' || inputsCollection.secondLastName.value === undefined){
                    alert("¡Segundo apellido vacío!")
                }/*else if(inputsCollection.email.value === '' || inputsCollection.email.value === undefined){
                    alert("¡Correo vacío!")
                }*/else if(inputsCollection.dni.value === '' || inputsCollection.dni.value === undefined){
                    alert("DNI vacío!")
                }else if(inputsCollection.temporalPass.value === '' || inputsCollection.temporalPass.value === undefined){
                    alert("Clave vacío!")
                }else{
                    reg(raw)
                }
            })

        }

        const reg = async (raw: any) => {
            registerEntity(raw, 'User')
                .then((res) => {
                    setTimeout(async () => {
                        //let data = await getUsers()
                        let parse = JSON.parse(raw);
                        eventLog('INS', 'SUPERVISOR', `${parse.username}`, '')
                        const tableBody: InterfaceElement = document.getElementById('datatable-body')
                        const container: InterfaceElement = document.getElementById('entity-editor-container')

                        new CloseDialog().x(container)
                        new Supervisors().render(Config.offset, Config.currentPage, infoPage.search)
                        //new Clients().load(tableBody, currentPage, data)
                    }, 1000)
                })
        }
    }

    private generateUserName = async (): Promise<void> => {
        const firstName: InterfaceElement = document.getElementById('entity-firstname')
        const secondName: InterfaceElement = document.getElementById('')
        const lastName: InterfaceElement = document.getElementById('entity-lastname')
        const secondLastName: InterfaceElement = document.getElementById('entity-secondlastname')
        const clientName: InterfaceElement = document.getElementById('entity-customer')

        const userName: InterfaceElement = document.getElementById('entity-username')

        let UserNameFFragment: string = ''
        let UserNameLNFragment: string = ''
        let UserNameSLNFragment: string = ''


        firstName.addEventListener('keyup', (e: any): void => {
            UserNameFFragment = firstName.value.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "")
            userName.setAttribute('value', `${UserNameFFragment.trim()}.${UserNameLNFragment}${UserNameSLNFragment[0] ?? ''}`)
        })

        lastName.addEventListener('keyup', (e: any): void => {
            UserNameLNFragment = lastName.value.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "")
            userName.setAttribute('value', `${UserNameFFragment.trim()}.${UserNameLNFragment}${UserNameSLNFragment[0] ?? ''}`)
        })

        secondLastName.addEventListener('keyup', (e: any): void => {
            UserNameSLNFragment = secondLastName.value.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "")
            if (secondLastName.value.length > 0) {
                //UserNameFFragment[0]
                userName.setAttribute('value', `${UserNameFFragment}.${UserNameLNFragment}${UserNameSLNFragment[0]}`)
            }
            else {
                userName.setAttribute('value', `${UserNameFFragment}.${UserNameLNFragment}`)
            }
        })

    }

    public import() {
        const importClients: InterfaceElement = document.getElementById('import-entities');
        importClients.addEventListener('click', () => {
            this.entityDialogContainer.innerHTML = '';
            this.entityDialogContainer.style.display = 'flex';
            this.entityDialogContainer.innerHTML = `
            <div class="entity_editor" id="entity-editor">
              <div class="entity_editor_header">
                <div class="user_info">
                  <div class="avatar"><i class="fa-regular fa-up-from-line"></i></div>
                  <h1 class="entity_editor_title">Importar <br><small>Supervisores</small></h1>
                </div>

                <button class="btn btn_close_editor" id="close"><i class="fa-solid fa-x"></i></button>
              </div>

              <!-- EDITOR BODY -->
              <div class="entity_editor_body padding_t_8_important">
                <div class="sidebar_section">
                    <div class="file_template">
                        <i class="fa-solid fa-file-csv"></i>
                        <div class="description">
                            <p class="filename">Plantilla de Supervisores</p>
                            <a
                            href="./public/src/templates/Supervisors.csv"
                            download="./public/src/templates/Supervisors.csv"
                            rel="noopener"
                            target="_self" class="filelink">Descargar</a>
                        </div>
                    </div>
                </div>

                <div class="sidebar_section" style="display: none">
                    <label class="drop_zone" id="drop-zone" draggable="true">
                        Seleccione o arrastre <br>su archivo aquí
                    </label>
                </div>

                <div class="sidebar_section">
                    <input type="file" id="file-handler">
                </div>
              </div>
              <!-- END EDITOR BODY -->

              <div class="entity_editor_footer">
                <button class="btn btn_primary btn_widder" id="button-import">Importar</button>
              </div>
            </div>
          `;
            const _fileHandler: InterfaceElement = document.getElementById('file-handler');
            _fileHandler.addEventListener('change', () => {
                readFile(_fileHandler.files[0]);
            });
            async function readFile(file: any) {
                let userState = await getNothing("name", "Disponible", "UserState")
                //const customer = await getEntitiesData('Customer');
                //const citadel = await getEntitiesData('Citadel');
                //const deparment = await getEntitiesData('Department');
                //const contractor = await getEntitiesData('Contractor');
                const fileReader = new FileReader()
                fileReader.readAsText(file)
                fileReader.addEventListener('load', async (e: any) => {
                    let result = e.srcElement.result
                    let resultSplit = result.split('\r')
                    let rawFile: string
                    let elem: any = []
                    for (let i = 1; i < resultSplit.length-1; i++) {
                        let userData = resultSplit[i].split(';')
                        let existUsername = await getVerifyUsername(`${userData[0]?.toLowerCase().replace(/\n/g, '')}.${userData[1]?.toLowerCase().replace(/\n/g, '')}${userData[2]?.toLowerCase().replace(/\n/g, '')[0]}@${currentUserInfo.customer.name.toLowerCase().replace(/\s+/g, '')}.com`)
                        rawFile = JSON.stringify({
                            "lastName": `${userData[1]?.replace(/\n/g, '')}`,
                            "secondLastName": `${userData[2]?.replace(/\n/g, '')}`,
                            "isSuper": false,
                            "email": "",
                            "temp": `${userData[5]?.replace(/\n/g, '')}`,
                            "isWebUser": false,
                            "isActive": true,
                            "newUser": true,
                            'isSupervisor': true,
                            "firstName": `${userData[0]?.replace(/\n/g, '')}`,
                            "userState": {
                                "id": `${userState.id}`
                            },
                            "business": {
                                "id": `${businessId}`
                            },
                            "phone": `${userData[3]?.replace(/\n/g, '')}`,
                            "dni": `${userData[4]?.replace(/\n/g, '')}`,
                            "userType": "GUARD",
                            "username": `${userData[0]?.toLowerCase().replace(/\n/g, '')}.${userData[1]?.toLowerCase().replace(/\n/g, '')}${userData[2]?.toLowerCase().replace(/\n/g, '')[0]}@${currentUserInfo.customer.name.toLowerCase().replace(/\s+/g, '')}.com`,
                            "createVisit": false,
                            'creationDate': `${currentDateTime().date}`,
                            'creationTime': `${currentDateTime().time}`,
                        });
                        if(existUsername == "none"){
                            elem.push(rawFile)
                        }
                    }
                    const importToBackend: InterfaceElement = document.getElementById('button-import');
                    importToBackend.addEventListener('click', () => {
                        elem.forEach((el: any) => {
                            registerEntity(el, 'User')
                                .then((res) => {
                                setTimeout(async () => {
                                    //let data = await getUsers()
                                    let parse = JSON.parse(el);
                                    eventLog('INS', 'SUPERVISOR', `${parse.username}, importación`, '')
                                    const tableBody = document.getElementById('datatable-body')
                                    const container = document.getElementById('entity-editor-container')
                                    new CloseDialog().x(container)
                                    new Supervisors().render(Config.offset, Config.currentPage, '')
                                    //new Clients().load(tableBody, currentPage, data)
                                }, 1000)
                            });
                        });
                    });
                });
            }
            this.close();
        });
    }

    private edit(container: InterfaceElement, data: Data) {
        // Edit entity
        const edit: InterfaceElement = document.querySelectorAll('#edit-entity')
        edit.forEach((edit: InterfaceElement) => {
            const entityId = edit.dataset.entityid
            edit.addEventListener('click', (): void => {
                RInterface('User', entityId)
            })
        })

        const RInterface = async (entities: string, entityID: string): Promise<void> => {
            const data: any = await getEntityData(entities, entityID)
            let disabled = false
            if(data.userState.name == "Asignado" || data.userState.name == "En servicio"){
                disabled = true
            }
            this.entityDialogContainer.innerHTML = ''
            this.entityDialogContainer.style.display = 'flex'
            this.entityDialogContainer.innerHTML = `
                <div class="entity_editor" id="entity-editor">
                <div class="entity_editor_header">
                    <div class="user_info">
                    <div class="avatar"><i class="fa-regular fa-user"></i></div>
                    <h1 class="entity_editor_title">Editar <br><small>${data.firstName} ${data.lastName}</small></h1>
                    </div>

                    <button class="btn btn_close_editor" id="close"><i class="fa-solid fa-x"></i></button>
                </div>

                <!-- EDITOR BODY -->
                <div class="entity_editor_body">
                    <div class="material_input">
                    <input type="text" id="entity-firstname" class="input_filled" value="${data.firstName}" readonly>
                    <label for="entity-firstname">Nombre</label>
                    </div>

                    <div class="material_input">
                    <input type="text" id="entity-lastname" class="input_filled" value="${data.lastName}" readonly>
                    <label for="entity-lastname">Apellido</label>
                    </div>

                    <div class="material_input">
                    <input type="text" id="entity-secondlastname" class="input_filled" value="${data.secondLastName}" readonly>
                    <label for="entity-secondlastname">2do Apellido</label>
                    </div>

                    <div class="material_input">
                    <input type="text"
                        id="entity-phone"
                        class="input_filled"
                        maxlength="10"
                        value="${data?.phone ?? ''}">
                    <label for="entity-phone">Teléfono</label>
                    </div>

                    <div class="material_input">
                    <input type="text" id="entity-username" class="input_filled" value="${data.username}" readonly>
                    <label for="entity-username">Nombre de usuario</label>
                    </div>

                    <div class="material_input">
                    <input type="text" maxlength="10" id="entity-dni" class="input_filled" value="${data?.dni ?? ''}">
                    <label for="entity-dni">Cédula</label>
                    </div>

                    <div class="material_input">
                    <input type="email" id="entity-email" class="input_filled" value="${data?.email ?? ''}" disabled>
                    <label for="entity-email">Email</label>
                    </div>

                    <div id="state"></div>
                    
                    <div class="input_detail">
                        <label for="creation-date"><i class="fa-solid fa-calendar"></i></label>
                        <input type="date" id="creation-date" class="input_filled" value="${data.creationDate}" readonly>
                    </div>
                    <br>
                    <div class="input_detail">
                        <label for="creation-time"><i class="fa-solid fa-clock"></i></label>
                        <input type="time" id="creation-time" class="input_filled" value="${data.creationTime}" readonly>
                    </div>
                    <br>
                    <div class="input_detail">
                        <label for="log-user"><i class="fa-solid fa-user"></i></label>
                        <input type="text" id="log-user" class="input_filled"value="${data.createdBy}" readonly>
                    </div>

                    <!--
                    <div class="material_input_select" style="display: none">
                    <label for="entity-business">Empresa</label>
                    <input type="text" id="entity-business" class="input_select" readonly placeholder="cargando...">
                    <div id="input-options" class="input_options">
                    </div>
                    </div>

                    <div class="material_input_select">
                    <label for="entity-citadel">Ciudadela</label>
                    <input type="text" id="entity-citadel" class="input_select" readonly placeholder="cargando...">
                    <div id="input-options" class="input_options">
                    </div>
                    </div>

                    <div class="material_input_select" style="display: none">
                    <label for="entity-customer">Cliente</label>
                    <input type="text" id="entity-customer" class="input_select" readonly placeholder="cargando...">
                    <div id="input-options" class="input_options">
                    </div>
                    </div>

                    <div class="material_input_select" style="display: none">
                    <label for="entity-department">Departamento</label>
                    <input type="text" id="entity-department" class="input_select" readonly placeholder="cargando...">
                    <div id="input-options" class="input_options">
                    </div>
                    </div>

                    <br><br><br>
                    <div class="material_input">
                    <input type="password" id="tempPass" >
                    <label for="tempPass">Contraseña</label>
                    </div>
                    -->

                </div>
                <!-- END EDITOR BODY -->

                <div class="entity_editor_footer">
                    <button class="btn btn_primary btn_widder" id="update-changes" style="display:${userPermissions().style};">Guardar</button>
                </div>
                </div>
            `

            inputObserver()
            const state: InterfaceElement = document.getElementById('state')
            if(disabled){
                state.innerHTML = `
                    <div class="material_input">
                    <input type="text" id="entity-state" class="input_filled" data-optionid="${data.userState.id}" value="${data.userState.name}" readonly>
                    <label for="entity-state">Estado</label>
                    </div>

                `
            }else{
                state.innerHTML = `
                    <div class="material_input_select">
                    <label for="entity-state">Estado</label>
                    <input type="text" id="entity-state" class="input_select" readonly placeholder="cargando...">
                    <div id="input-options" class="input_options">
                    </div>
                    </div>
                `
                inputSelect('UserState', 'entity-state', data.userState.id)
            }
            
            //inputSelect('Business', 'entity-citadel')
            //inputSelect('Customer', 'entity-customer')
            
            //inputSelect('Department', 'entity-department')
            //inputSelect('Business', 'entity-business')
            this.close()
            UUpdate(entityID, data.username)
        }

        const UUpdate = async (entityId: any, user: any): Promise<void> => {
            const updateButton: InterfaceElement =
                document.getElementById('update-changes')
            updateButton.addEventListener('click', () => {
                const $value = {
                    // @ts-ignore
                    //firstName: document.getElementById('entity-firstname'),
                    // @ts-ignore
                    //lastName: document.getElementById('entity-lastname'),
                    // @ts-ignore
                    //secondLastName: document.getElementById('entity-secondlastname'),
                    // @ts-ignore
                    phone: document.getElementById('entity-phone'),
                    // @ts-ignore
                    //email: document.getElementById('entity-email'),
                    // @ts-ignore
                    status: document.getElementById('entity-state'),
                    // @ts-ignore
                    dni: document.getElementById('entity-dni'),
                    // @ts-ignore
                    //business: document.getElementById('entity-business'),
                    // @ts-ignore
                    //client: document.getElementById('entity-customer'),
                    // @ts-ignore
                    //department: document.getElementById('entity-department'),
                    // @ts-ignore
                    //customer: document.getElementById('entity-customer')
                }
                let raw = JSON.stringify({
                    // @ts-ignore
                    //"lastName": `${$value.lastName?.value}`,
                    // @ts-ignore
                    //"secondLastName": `${$value.secondLastName?.value}`,
                    "active": true,
                    // @ts-ignore
                    //"firstName": `${$value.firstName?.value}`,
                    "userState": {
                        "id": `${$value.status?.dataset.optionid}`
                    },
                    //"customer": {
                    //    "id": `${$value.customer?.dataset.optionid}`
                    //},
                    // @ts-ignore
                    "phone": `${$value.phone?.value}`,
                    // @ts-ignore
                    "dni": `${$value.dni.value}`,
                    // @ts-ignore
                    //"email": `${$value.email?.value}`,
                })
                // @ts-ignore
                if ($value.dni.value === '' || $value.dni.value === undefined) {
                    alert("DNI vacío!");
                }else{
                    update(raw)
                }
            })
            const update = (raw: any) => {
                updateEntity('User', entityId, raw)
                    .then((res) => {
                        setTimeout(async () => {
                            let tableBody: InterfaceElement
                            let container: InterfaceElement
                            let data: any
                            
                            //data = await getUsers()
                            eventLog('UPD', 'SUPERVISOR', `${user}`, '')
                            new CloseDialog()
                                .x(container =
                                    document.getElementById('entity-editor-container')
                                )
                            new Supervisors().render(infoPage.offset, infoPage.currentPage, infoPage.search)
                           /* new Clients().load(tableBody
                                = document.getElementById('datatable-body'),
                                currentPage,
                                data
                            )*/

                        }, 100)
                    })
            }
        }
    }

    /*private changeUserPassword(): void {
        const changeUserPasswordKeys: InterfaceElement = document.querySelectorAll('#change-user-password')
        changeUserPasswordKeys.forEach((buttonKey: InterfaceElement): void => {
            buttonKey.addEventListener('click', async (): Promise<void> => {
                let userId: string = buttonKey.dataset.userid
                this.dialogContainer.style.display = 'block'
                this.dialogContainer.innerHTML = `
                    <div class="dialog_content" id="dialog-content">
                        <div class="dialog">
                            <div class="dialog_container padding_8">
                                <div class="dialog_header">
                                    <h2>Actualizar contraseña</h2>
                                </div>

                                <div class="dialog_message padding_8">
                                    <div class="material_input">
                                        <input type="password" id="password" autocomplete="none">
                                        <label for="entity-lastname"><i class="fa-solid fa-lock"></i> Nueva contraseña</label>
                                    </div>

                                    <div class="material_input">
                                        <input type="password" id="re-password" autocomplete="none">
                                        <label for="entity-lastname"><i class="fa-solid fa-lock"></i> Repetir contraseña</label>
                                    </div>
                                </div>

                                <div class="dialog_footer">
                                    <button class="btn btn_primary" id="cancel">Cancelar</button>
                                    <button class="btn btn_danger" id="update-password">Actualizar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `
                inputObserver()
                const _password: InterfaceElement = document.getElementById('password')
                const _repassword: InterfaceElement = document.getElementById('re-password')
                const _updatePasswordButton: InterfaceElement = document.getElementById('update-password')
                const _closeButton: InterfaceElement = document.getElementById('cancel')
                const _dialog: InterfaceElement = document.getElementById('dialog-content')

                _updatePasswordButton.addEventListener('click', () => {
                    if (_password.value === '') {
                        alert('El campo "Contraseña" no puede estar vacío.')
                    }
                    else if (_repassword.value === ' ') {
                        alert('Debe repetir la contraseña para continuar')
                    }
                    else if (_password.value === _repassword.value) {
                        let raw: string = JSON.stringify({
                            "id": `${userId}`,
                            "newPassword": `${_password.value}`
                        })

                        setPassword(raw)
                            .then((): void => {
                                setTimeout((): void => {
                                    alert('Se ha cambiado la contraseña')
                                    new CloseDialog().x(_dialog)
                                }, 1000)
                            })
                    }
                    else {
                        console.log('Las contraseñas no coinciden')
                        alert('Las contraseñas no coinciden')
                    }
                })

                _closeButton.onclick = () => {
                    new CloseDialog().x(_dialog)
                }
            })
        })

    }*/

    private remove() {
        const remove: InterfaceElement = document.querySelectorAll('#remove-entity')
        remove.forEach((remove: InterfaceElement) => {

            const entityId = remove.dataset.entityid
            const entityName = remove.dataset.entityname
            // BOOKMARK: MODAL
            remove.addEventListener('click', async (): Promise<void> => {
                const data: any = await getEntityData('User', entityId)
                this.dialogContainer.style.display = 'block'
                this.dialogContainer.innerHTML = `
                    <div class="dialog_content" id="dialog-content">
                        <div class="dialog dialog_danger">
                        <div class="dialog_container">
                            <div class="dialog_header">
                            <h2>¿Deseas eliminar este supervisor?</h2>
                            </div>

                            <div class="dialog_message">
                            <p>Esta acción no se puede revertir</p>
                            </div>

                            <div class="dialog_footer">
                            <button class="btn btn_primary" id="cancel">Cancelar</button>
                            <button class="btn btn_danger" id="delete">Eliminar</button>
                            </div>
                        </div>
                        </div>
                    </div>`

                const deleteButton: InterfaceElement = document.getElementById('delete')
                const cancelButton: InterfaceElement = document.getElementById('cancel')
                const dialogContent: InterfaceElement = document.getElementById('dialog-content')

                deleteButton.onclick = async () => {
                    if(data.userState.name == "Disponible" || data.userState.name == "No disponible"){
                        deleteEntity('User', entityId)
                        .then((res) => {
                            setTimeout(async () => {
                                //let data = await getUsers();
                                eventLog('DLT', 'SUPERVISOR', `${entityName}`, '')
                                const tableBody = document.getElementById('datatable-body');
                                new CloseDialog().x(dialogContent);
                                new Supervisors().render(infoPage.offset, infoPage.currentPage, infoPage.search)
                                //new Clients().load(tableBody, currentPage, data);
                                
                            }, 1000);
                        })
                    }else{
                        let message: any
                        let status1 = await getSearch("crewOne.id", entityId, "Crew")
                        if(status1 != undefined){
                            message = {
                                role: "SUPERVISOR",
                                crew: status1.name,
                                status: status1.crewState.name
                            }
                        }
                        alert(`El guardia ${entityName} está asignado como ${message.role} en la patrulla: ${message.crew}, que está en estado: ${message.status}`)
                    }
                }

                cancelButton.onclick = () => {
                    new CloseDialog().x(dialogContent)
                    //this.render()
                }
            })
        })

    }

    private export = (): void => {
        const exportUsers: InterfaceElement = document.getElementById('export-entities');
        exportUsers.addEventListener('click', async() => {
            this.dialogContainer.style.display = 'block';
            this.dialogContainer.innerHTML = `
                <div class="dialog_content" id="dialog-content">
                    <div class="dialog">
                        <div class="dialog_container padding_8">
                            <div class="dialog_header">
                                <h2>Seleccione un tipo</h2>
                            </div>

                            <div class="dialog_message padding_8">
                                <div class="form_group">
                                    <label for="exportCsv">
                                        <input type="radio" id="exportCsv" name="exportOption" value="csv" /> CSV
                                    </label>

                                    <label for="exportXls">
                                        <input type="radio" id="exportXls" name="exportOption" value="xls" checked /> XLS
                                    </label>
                                    <!--
                                    <label for="exportPdf">
                                        <input type="radio" id="exportPdf" name="exportOption" value="pdf" /> PDF
                                    </label> -->
                                </div>
                            </div>

                            <div class="dialog_footer">
                                <button class="btn btn_primary" id="cancel">Cancelar</button>
                                <button class="btn btn_danger" id="export-data">Exportar</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            inputObserver();
            const _closeButton: InterfaceElement = document.getElementById('cancel');
            const exportButton: InterfaceElement = document.getElementById('export-data');
            const _dialog: InterfaceElement = document.getElementById('dialog-content');
            exportButton.addEventListener('click', async() => {
                const _values: any = {
                    exportOption: document.getElementsByName('exportOption')
                }
                let rawExport = JSON.stringify({
                    "filter": {
                        "conditions": [
                          {
                            "property": "business.id",
                            "operator": "=",
                            "value": `${businessId}`
                          },
                          {
                            "property": "userType",
                            "operator": "=",
                            "value": `GUARD`
                          },
                          {
                            "property": "isSuper",
                            "operator": "=",
                            "value": `${false}`
                          },
                          {
                            "property": "isSupervisor",
                            "operator": "=",
                            "value": `${true}`
                          }
                        ],
                        
                    }, 
                    sort: "-createdDate",
                    fetchPlan: 'full',
                    
                })
                if(infoPage.search != ""){
                    rawExport = JSON.stringify({
                        "filter": {
                            "conditions": [
                              {
                                "group": "OR",
                                "conditions": [
                                  {
                                    "property": "dni",
                                    "operator": "contains",
                                    "value": `${infoPage.search.toLowerCase()}`
                                  },
                                  {
                                    "property": "firstName",
                                    "operator": "contains",
                                    "value": `${infoPage.search.toLowerCase()}`
                                  },
                                  {
                                    "property": "lastName",
                                    "operator": "contains",
                                    "value": `${infoPage.search.toLowerCase()}`
                                  },
                                  {
                                    "property": "secondLastName",
                                    "operator": "contains",
                                    "value": `${infoPage.search.toLowerCase()}`
                                  },
                                  {
                                    "property": "username",
                                    "operator": "contains",
                                    "value": `${infoPage.search.toLowerCase()}`
                                  },
                                  {
                                    "property": "email",
                                    "operator": "contains",
                                    "value": `${infoPage.search.toLowerCase()}`
                                  }
                                ]
                              },
                              {
                                "property": "business.id",
                                "operator": "=",
                                "value": `${businessId}`
                              },
                              {
                                "property": "userType",
                                "operator": "=",
                                "value": `GUARD`
                              },
                              {
                                "property": "isSuper",
                                "operator": "=",
                                "value": `${false}`
                              },
                              {
                                "property": "isSupervisor",
                                "operator": "=",
                                "value": `${true}`
                              }
                            ]
                          },
                        sort: "-createdDate",
                        fetchPlan: 'full',
                        
                    })
                }
                const users: any = await getFilterEntityData("User", rawExport) //await getUsers()
                for (let i = 0; i < _values.exportOption.length; i++) {
                    let ele: any = _values.exportOption[i]
                    if (ele.type = "radio") {
    
                        if (ele.checked){
                            if(ele.value == "xls"){
                                // @ts-ignore
                                exportSupervisorXls(users)
                            }else if(ele.value == "csv"){
                                // @ts-ignore
                                exportSupervisorCsv(users)
                            }else if(ele.value == "pdf"){
                                // @ts-ignore
                                //exportClientPdf(users)
                            }
                        }
                    }
                }
            })
            _closeButton.onclick = () => {
                new CloseDialog().x(_dialog);
            };
        });
    };

    private pagination(items: [], limitRows: number, currentPage: number) {
        const tableBody: InterfaceElement = document.getElementById('datatable-body')
        const paginationWrapper: InterfaceElement = document.getElementById('pagination-container')
        paginationWrapper.innerHTML = ''

        let pageCount: number
        pageCount = Math.ceil(infoPage.count / limitRows)

        let button: InterfaceElement

        if(pageCount <= Config.maxLimitPage){
            for (let i = 1; i < pageCount + 1; i++) {
                button = setupButtons(
                    i /*, items, currentPage, tableBody, limitRows*/
                )

                paginationWrapper.appendChild(button)
            }
            fillBtnPagination(currentPage, Config.colorPagination)
        }else{
            pagesOptions(items, currentPage)  
        }

        function setupButtons(page: any /*, items: any, currentPage: number, tableBody: InterfaceElement, limitRows: number*/) {
            const button: InterfaceElement = document.createElement('button')
            button.classList.add('pagination_button')
            button.setAttribute("name", "pagination-button")
            button.setAttribute("id", "btnPag"+page)
            button.innerText = page

            button.addEventListener('click', (): void => {
                infoPage.offset = Config.tableRows * (page - 1)
                currentPage = page
                new Supervisors().render(infoPage.offset, currentPage, infoPage.search)
                //new Clients().load(tableBody, page, items)
            })

            return button
        }

        function pagesOptions(items: any, currentPage: any) {
            paginationWrapper.innerHTML = ''
            let pages = pageNumbers(pageCount, Config.maxLimitPage, currentPage)
            
            const prevButton: InterfaceElement = document.createElement('button')
            prevButton.classList.add('pagination_button')
            prevButton.innerText = "<<"     
            paginationWrapper.appendChild(prevButton)

            const nextButton: InterfaceElement = document.createElement('button')
            nextButton.classList.add('pagination_button')
            nextButton.innerText = ">>"
    
            for (let i = 0; i < pages.length; i++) {
                if(pages[i] > 0 && pages[i] <= pageCount){
                    button = setupButtons(
                        pages[i]
                    )
                    paginationWrapper.appendChild(button)
                }
            }
            paginationWrapper.appendChild(nextButton)
            fillBtnPagination(currentPage, Config.colorPagination)
            setupButtonsEvents(prevButton, nextButton)
        }

        function setupButtonsEvents(prevButton: InterfaceElement, nextButton: InterfaceElement) {
            prevButton.addEventListener('click', (): void => {
                new Supervisors().render(Config.offset, Config.currentPage, infoPage.search)
            })

            nextButton.addEventListener('click', (): void => {
                infoPage.offset = Config.tableRows * (pageCount - 1)
                new Supervisors().render(infoPage.offset, pageCount, infoPage.search)
            })
        }
    }

    private close(): void {
        const closeButton: InterfaceElement = document.getElementById('close')
        const editor: InterfaceElement = document.getElementById('entity-editor-container')

        closeButton.addEventListener('click', () => {
            console.log('close')
            new CloseDialog().x(editor)
        }, false)
    }
}

export const setUserPassword = async (): Promise<any> => {
    /*const users: any = await getEntitiesData('User')
    const filterBySuperUsers: any = users.filter((data: any) => data.isSuper === false)
    const FCustomer: any = filterBySuperUsers.filter((data: any) => `${data.customer?.id}` === `${customerId}`)
    const filterByUserType: any = FCustomer.filter((data: any) => `${data.userType}`.includes('CUSTOMER'))
    const data: any = filterByUserType*/
    let raw = JSON.stringify({
        "filter": {
            "conditions": [
              {
                "property": "business.id",
                "operator": "=",
                "value": `${businessId}`
              },
              {
                "property": "newUser",
                "operator": "=",
                "value": `${true}`
              },
              {
                "property": "userType",
                "operator": "=",
                "value": `GUARD`
              },
              {
                "property": "isSuper",
                "operator": "=",
                "value": `${false}`
              },
              {
                "property": "isSupervisor",
                "operator": "=",
                "value": `${true}`
              }
            ]
        }
    })
    let data = await getFilterEntityData("User", raw)
    data.forEach((newUser: any) => {
        let raw: string = JSON.stringify({
            "id": `${newUser.id}`,
            "newPassword": `${newUser.temp}`
        })

        if (newUser.newUser === true && (newUser.temp !== undefined || newUser.temp !== ''))
            setPassword(raw)
    })
    setRole(data)
}

export async function setRole(data: any): Promise<void> {
    /*const users: any = await getEntitiesData('User')
    const filterByNewUsers: any = users.filter((data: any) => data.newUser === true)
    const FCustomer: any = filterByNewUsers.filter((data: any) => `${data.customer?.id}` === `${customerId}`)
    const filterByUserType: any = FCustomer.filter((data: any) => `${data.userType}`.includes('CUSTOMER'))
    const data: any = filterByUserType*/
    /*let raw = JSON.stringify({
        "filter": {
            "conditions": [
              {
                "property": "newUser",
                "operator": "=",
                "value": `${true}`
              },
              {
                "property": "business.id",
                "operator": "=",
                "value": `${businessId}`
              },
              {
                "property": "userType",
                "operator": "=",
                "value": `GUARD`
              },
              {
                "property": "isSuper",
                "operator": "=",
                "value": `${false}`
              }
            ]
        }
    })
    data = await getFilterEntityData("User", raw)*/
    data.forEach((newUser: any) => {
        let raw: string = JSON.stringify({
            "id": `${newUser.id}`,
            "roleCode": 'app_guard_supervisor'
        })

        let updateNewUser: string = JSON.stringify({
            "newUser": false,
            "temp": ''
        })

        if (newUser.newUser === true) {
            setUserRole(raw).then((res) => {
                setTimeout(() => {
                    updateEntity('User', newUser.id, updateNewUser)
                }, 1000)
            })
        }
    })
}
