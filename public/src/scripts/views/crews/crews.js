//
//  Clients.ts
//
//  Generated by Poll Castillo on 15/02/2023
//
import { deleteEntity, getEntityData, registerEntity, updateEntity, getFilterEntityData, getFilterEntityCount } from "../../endpoints.js";
import { drawTagsIntoTables, inputObserver, inputSelect, CloseDialog, filterDataByHeaderType, pageNumbers, fillBtnPagination, userPermissions, currentDateTime, eventLog, getNothing, getUpdateState, getSearch } from "../../tools.js";
import { Config } from "../../Configs.js";
import { tableLayout } from "./Layout.js";
import { tableLayoutTemplate } from "./Templates.js";
import { exportPatrolCsv, exportPatrolXls } from "../../exportFiles/patrols.js";
const tableRows = Config.tableRows;
const currentPage = Config.currentPage;
const businessId = localStorage.getItem('business_id');
let currentWeaponInfo;
let infoPage = {
    count: 0,
    offset: Config.offset,
    currentPage: currentPage,
    search: ""
};
let dataPage;
const getCrews = async () => {
    //const users: Data = await getEntitiesData('Crew')
    //const FSuper: Data = users.filter((data: any) => data.isSuper === false)
    //const FWeapon: Data = FSuper.filter((data: any) => `${data.customer?.id}` === `${customerId}`)
    //const data: Data = FWeapon.filter((data: any) => `${data.userType}`.includes('CUSTOMER'))
    let raw = JSON.stringify({
        "filter": {
            "conditions": [
                {
                    "property": "business.id",
                    "operator": "=",
                    "value": `${businessId}`
                }
            ],
        },
        sort: "-createdDate",
        limit: Config.tableRows,
        offset: infoPage.offset,
        fetchPlan: 'full',
    });
    if (infoPage.search != "") {
        raw = JSON.stringify({
            "filter": {
                "conditions": [
                    {
                        "group": "OR",
                        "conditions": [
                            {
                                "property": "name",
                                "operator": "contains",
                                "value": `${infoPage.search.toLowerCase()}`
                            }
                        ]
                    },
                    {
                        "property": "business.id",
                        "operator": "=",
                        "value": `${businessId}`
                    }
                ]
            },
            sort: "-createdDate",
            limit: Config.tableRows,
            offset: infoPage.offset,
            fetchPlan: 'full',
        });
    }
    infoPage.count = await getFilterEntityCount("Crew", raw);
    dataPage = await getFilterEntityData("Crew", raw);
    return dataPage;
};
export class Crews {
    constructor() {
        this.dialogContainer = document.getElementById('app-dialogs');
        this.entityDialogContainer = document.getElementById('entity-editor-container');
        this.datatableContainer = document.getElementById('datatable-container');
        this.searchEntity = async (tableBody /*, data: any*/) => {
            const search = document.getElementById('search');
            const btnSearch = document.getElementById('btnSearch');
            search.value = infoPage.search;
            await search.addEventListener('keyup', async () => {
                /********const arrayData: any = await data.filter((user: any) =>
                    `${user.id}
                    ${user.firstName}
                     ${user.lastName}
                     ${user.username}`
                        .toLowerCase()
                        .includes(search.value.toLowerCase())
                )
    
                let filteredResult = arrayData.length
                let result = arrayData
                if (filteredResult >= tableRows) filteredResult = tableRows
    
                this.load(tableBody, currentPage, result)
    
                this.pagination(result, tableRows, currentPage)*/
            });
            btnSearch.addEventListener('click', async () => {
                new Crews().render(Config.offset, Config.currentPage, search.value.toLowerCase().trim());
            });
        };
        this.export = () => {
            const exportWeapons = document.getElementById('export-entities');
            exportWeapons.addEventListener('click', async () => {
                this.dialogContainer.style.display = 'block';
                this.dialogContainer.innerHTML = `
                <div class="dialog_content" id="dialog-content">
                    <div class="dialog">
                        <div class="dialog_container padding_8">
                            <div class="dialog_header">
                                <h2>Seleccione un tipo</h2>
                            </div>

                            <div class="dialog_message padding_8">
                                <div class="form_group">
                                    <label for="exportCsv">
                                        <input type="radio" id="exportCsv" name="exportOption" value="csv" /> CSV
                                    </label>

                                    <label for="exportXls">
                                        <input type="radio" id="exportXls" name="exportOption" value="xls" checked /> XLS
                                    </label>
                                    <!--
                                    <label for="exportPdf">
                                        <input type="radio" id="exportPdf" name="exportOption" value="pdf" /> PDF
                                    </label>-->
                                </div>
                            </div>

                            <div class="dialog_footer">
                                <button class="btn btn_primary" id="cancel">Cancelar</button>
                                <button class="btn btn_danger" id="export-data">Exportar</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
                inputObserver();
                const _closeButton = document.getElementById('cancel');
                const exportButton = document.getElementById('export-data');
                const _dialog = document.getElementById('dialog-content');
                exportButton.addEventListener('click', async () => {
                    const _values = {
                        exportOption: document.getElementsByName('exportOption')
                    };
                    let rawExport = JSON.stringify({
                        "filter": {
                            "conditions": [
                                {
                                    "property": "business.id",
                                    "operator": "=",
                                    "value": `${businessId}`
                                }
                            ],
                        },
                        sort: "-createdDate",
                        fetchPlan: 'full',
                    });
                    if (infoPage.search != "") {
                        rawExport = JSON.stringify({
                            "filter": {
                                "conditions": [
                                    {
                                        "group": "OR",
                                        "conditions": [
                                            {
                                                "property": "name",
                                                "operator": "contains",
                                                "value": `${infoPage.search.toLowerCase()}`
                                            }
                                        ]
                                    },
                                    {
                                        "property": "business.id",
                                        "operator": "=",
                                        "value": `${businessId}`
                                    }
                                ]
                            },
                            sort: "-createdDate",
                            fetchPlan: 'full',
                        });
                    }
                    const crews = await getFilterEntityData("Crew", rawExport); //await getWeapons()
                    for (let i = 0; i < _values.exportOption.length; i++) {
                        let ele = _values.exportOption[i];
                        if (ele.type = "radio") {
                            if (ele.checked) {
                                if (ele.value == "xls") {
                                    // @ts-ignore
                                    exportPatrolXls(crews);
                                }
                                else if (ele.value == "csv") {
                                    // @ts-ignore
                                    exportPatrolCsv(crews);
                                }
                                else if (ele.value == "pdf") {
                                    // @ts-ignore
                                    //exportClientPdf(users)
                                }
                            }
                        }
                    }
                });
                _closeButton.onclick = () => {
                    new CloseDialog().x(_dialog);
                };
            });
        };
    }
    async render(offset, actualPage, search) {
        infoPage.offset = offset;
        infoPage.currentPage = actualPage;
        infoPage.search = search;
        this.datatableContainer.innerHTML = '';
        this.datatableContainer.innerHTML = tableLayout;
        const tableBody = document.getElementById('datatable-body');
        tableBody.innerHTML = '.Cargando...';
        let data = await getCrews();
        tableBody.innerHTML = tableLayoutTemplate.repeat(tableRows);
        this.load(tableBody, currentPage, data);
        this.searchEntity(tableBody /*, data*/);
        new filterDataByHeaderType().filter();
        this.pagination(data, tableRows, infoPage.currentPage);
    }
    load(table, currentPage, data) {
        table.innerHTML = '';
        currentPage--;
        let start = tableRows * currentPage;
        let end = start + tableRows;
        let paginatedItems = data.slice(start, end);
        if (data.length === 0) {
            let row = document.createElement('tr');
            row.innerHTML = `
                <td>No hay datos</td>
                <td></td>
                <td></td>
            `;
            table.appendChild(row);
        }
        else {
            for (let i = 0; i < paginatedItems.length; i++) {
                let client = paginatedItems[i];
                let row = document.createElement('tr');
                row.innerHTML += `
                    <td>${client.name}</td>
                    <td>${client?.vehicular?.type ?? ''} [${client?.vehicular.licensePlate ?? ''}]</td>
                    <td>${client?.category ?? ''}</td>
                    <td class="tag"><span>${client?.crewState.name ?? ''}</span></td>
                    <td class="entity_options">
                        <button class="button" id="edit-entity" data-entityId="${client.id}">
                            <i class="fa-solid fa-pen"></i>
                        </button>

                        <button class="button" id="remove-entity" data-entityId="${client.id}" data-entityName="${client.name}" style="display:${userPermissions().style};">
                            <i class="fa-solid fa-trash"></i>
                        </button>
                    </td>
                `;
                table.appendChild(row);
                drawTagsIntoTables();
            }
        }
        this.register();
        //this.import()
        this.export();
        this.edit(this.entityDialogContainer, data);
        this.remove();
        //this.changeWeaponPassword()
    }
    register() {
        // register entity
        const openEditor = document.getElementById('new-entity');
        openEditor.addEventListener('click', () => {
            renderInterface('Crew');
        });
        const renderInterface = async (entities) => {
            const nothingConfig = {
                nothingUser: await getNothing("username", "N/A", "User"),
                nothingWeapon: await getNothing("name", "N/A", "Weapon"),
                userState: await getNothing("name", "Asignado", "UserState"),
                weaponState: await getNothing("name", "Asignado", "WeaponState"),
                vehicularState: await getNothing("name", "Asignado", "VehicularState")
            };
            this.entityDialogContainer.innerHTML = ''; //style="max-width:90%"
            this.entityDialogContainer.style.display = 'flex';
            this.entityDialogContainer.innerHTML = `
                <div class="entity_editor" id="entity-editor">
                <div class="entity_editor_header">
                    <div class="user_info">
                    <div class="avatar"><i class="fa-regular fa-users"></i></div>
                    <h1 class="entity_editor_title">Registrar <br><small>Patrulla</small></h1>
                    </div>

                    <button class="btn btn_close_editor" id="close"><i class="fa-regular fa-x"></i></button>
                </div>

                <!-- EDITOR BODY -->
                <div class="entity_editor_body">

                    <div class="material_input">
                    <input type="text" id="entity-name" autocomplete="none">
                    <label for="entity-name"><i class="fa-solid fa-users"></i> Nombre</label>
                    </div>

                    <div class="material_input">
                    <input type="text" id="entity-vehicle" autocomplete="none" readonly>
                    <label for="entity-vehicle"><i class="fa-solid fa-car" readonly></i> Vehículo</label>
                    </div>

                    <div class="material_input_select">
                    <label for="entity-state">Estado</label>
                    <input type="text" id="entity-state" class="input_select" readonly placeholder="cargando..." autocomplete="none">
                    <div id="input-options" class="input_options">
                    </div>
                    </div>

                    <h3>Supervisor</h3>
                    <br>

                    <div class="material_input">
                    <input type="text" id="entity-supervisor" autocomplete="none" readonly>
                    <label for="entity-supervisor"><i class="fa-solid fa-person-military-pointing"></i> Supervisor</label>
                    </div>

                    <div class="material_input">
                    <input type="text" id="entity-weapon1" autocomplete="none" data-optionid="${nothingConfig.nothingWeapon.id}" value="${nothingConfig.nothingWeapon.name} [${nothingConfig.nothingWeapon.licensePlate}]" readonly>
                    <label for="entity-weapon1"><i class="fa-solid fa-gun"></i> Arma Supervisor</label>
                    <button id="delete-weapon1"><i class="fa-solid fa-trash"></i></button>
                    </div>

                    <h3>Segundero</h3>
                    <br>

                    <div class="material_input">
                    <input type="text" id="entity-segundero" autocomplete="none" data-optionid="${nothingConfig.nothingUser.id}" value="${nothingConfig.nothingUser.username}" readonly>
                    <label for="entity-segundero"><i class="fa-solid fa-user-nurse"></i> Segundero</label>
                    <button id="delete-segundero"><i class="fa-solid fa-trash"></i></button>
                    </div>

                    <div class="material_input">
                    <input type="text" id="entity-weapon2" autocomplete="none" data-optionid="${nothingConfig.nothingWeapon.id}" value="${nothingConfig.nothingWeapon.name} [${nothingConfig.nothingWeapon.licensePlate}]" readonly>
                    <label for="entity-weapon2"><i class="fa-solid fa-gun"></i> Arma Segundero</label>
                    <button id="delete-weapon2"><i class="fa-solid fa-trash"></i></button>
                    </div>

                    <h3>Custodio 1</h3>
                    <br>

                    <div class="material_input">
                    <input type="text" id="entity-custodio1" autocomplete="none" data-optionid="${nothingConfig.nothingUser.id}" value="${nothingConfig.nothingUser.username}" readonly>
                    <label for="entity-custodio1"><i class="fa-solid fa-user"></i> Custodio 1</label>
                    <button id="delete-custodio1"><i class="fa-solid fa-trash"></i></button>
                    </div>

                    <div class="material_input">
                    <input type="text" id="entity-weapon3" autocomplete="none" data-optionid="${nothingConfig.nothingWeapon.id}" value="${nothingConfig.nothingWeapon.name} [${nothingConfig.nothingWeapon.licensePlate}]" readonly>
                    <label for="entity-weapon3"><i class="fa-solid fa-gun"></i> Arma Custodio 1</label>
                    <button id="delete-weapon3"><i class="fa-solid fa-trash"></i></button>
                    </div>

                    <h3>Custodio 2</h3>
                    <br>

                    <div class="material_input">
                    <input type="text" id="entity-custodio2" autocomplete="none" data-optionid="${nothingConfig.nothingUser.id}" value="${nothingConfig.nothingUser.username}" readonly>
                    <label for="entity-custodio2"><i class="fa-solid fa-user"></i> Custodio 2</label>
                    <button id="delete-custodio2"><i class="fa-solid fa-trash"></i></button>
                    </div>

                    <div class="material_input">
                    <input type="text" id="entity-weapon4" autocomplete="none" data-optionid="${nothingConfig.nothingWeapon.id}" value="${nothingConfig.nothingWeapon.name} [${nothingConfig.nothingWeapon.licensePlate}]" readonly>
                    <label for="entity-weapon4"><i class="fa-solid fa-gun"></i> Arma Custodio 2</label>
                    <button id="delete-weapon4"><i class="fa-solid fa-trash"></i></button>
                    </div>

                    <h3>Custodio 3</h3>
                    <br>

                    <div class="material_input">
                    <input type="text" id="entity-custodio3" autocomplete="none" data-optionid="${nothingConfig.nothingUser.id}" value="${nothingConfig.nothingUser.username}" readonly>
                    <label for="entity-custodio3"><i class="fa-solid fa-user"></i> Custodio 3</label>
                    <button id="delete-custodio3"><i class="fa-solid fa-trash"></i></button>
                    </div>

                    <div class="material_input">
                    <input type="text" id="entity-weapon5" autocomplete="none" data-optionid="${nothingConfig.nothingWeapon.id}" value="${nothingConfig.nothingWeapon.name} [${nothingConfig.nothingWeapon.licensePlate}]" readonly>
                    <label for="entity-weapon5"><i class="fa-solid fa-gun"></i> Arma Custodio 3</label>
                    <button id="delete-weapon5"><i class="fa-solid fa-trash"></i></button>
                    </div>

                </div>
                <!-- END EDITOR BODY -->
                    
                <div class="entity_editor_footer">
                    <button class="btn btn_primary btn_widder" id="register-entity">Guardar</button>
                </div>
                </div>
            `;
            inputObserver();
            //inputSelect('Citadel', 'entity-citadel')
            //inputSelect('Crew', 'entity-customer')
            this.selectVehicle();
            this.selectUser('INS', '', '');
            this.selectWeapon('INS', '', '');
            this.selectDelete(nothingConfig);
            inputSelect('CrewState', 'entity-state', 'Disponible');
            //inputSelect('Department', 'entity-department')
            //inputSelect('Business', 'entity-business')
            this.close();
            const registerButton = document.getElementById('register-entity');
            registerButton.addEventListener('click', async () => {
                const inputsCollection = {
                    name: document.getElementById('entity-name'),
                    vehicular: document.getElementById('entity-vehicle'),
                    state: document.getElementById('entity-state'),
                    supervisor: document.getElementById('entity-supervisor'),
                    segundero: document.getElementById('entity-segundero'),
                    custodio1: document.getElementById('entity-custodio1'),
                    custodio2: document.getElementById('entity-custodio2'),
                    custodio3: document.getElementById('entity-custodio3'),
                    weapon1: document.getElementById('entity-weapon1'),
                    weapon2: document.getElementById('entity-weapon2'),
                    weapon3: document.getElementById('entity-weapon3'),
                    weapon4: document.getElementById('entity-weapon4'),
                    weapon5: document.getElementById('entity-weapon5'),
                };
                let dataArray = [];
                if (inputsCollection.supervisor.dataset.optionid) {
                    dataArray.push({
                        id: inputsCollection.supervisor.dataset.optionid,
                        value: inputsCollection.supervisor.value,
                        table: "User",
                        state: nothingConfig.userState.id,
                        title: "SUPERVISOR"
                    });
                    if (inputsCollection.weapon1.dataset.optionid != nothingConfig.nothingWeapon.id || inputsCollection.weapon1.value != "N/A [N/A]") {
                        dataArray.push({
                            id: inputsCollection.weapon1.dataset.optionid,
                            value: inputsCollection.weapon1.value,
                            table: "Weapon",
                            state: nothingConfig.weaponState.id,
                            title: "ARMA"
                        });
                    }
                }
                else {
                    inputsCollection.weapon1.dataset.optionid = nothingConfig.nothingWeapon.id;
                }
                if (inputsCollection.segundero.dataset.optionid != nothingConfig.nothingUser.id || inputsCollection.segundero.value != "N/A") {
                    dataArray.push({
                        id: inputsCollection.segundero.dataset.optionid,
                        value: inputsCollection.segundero.value,
                        table: "User",
                        state: nothingConfig.userState.id,
                        title: "GUARDIA"
                    });
                    if (inputsCollection.weapon2.dataset.optionid != nothingConfig.nothingWeapon.id || inputsCollection.weapon2.value != "N/A [N/A]") {
                        dataArray.push({
                            id: inputsCollection.weapon2.dataset.optionid,
                            value: inputsCollection.weapon2.value,
                            table: "Weapon",
                            state: nothingConfig.weaponState.id,
                            title: "ARMA"
                        });
                    }
                }
                else {
                    inputsCollection.weapon2.dataset.optionid = nothingConfig.nothingWeapon.id;
                }
                if (inputsCollection.custodio1.dataset.optionid != nothingConfig.nothingUser.id || inputsCollection.custodio1.value != "N/A") {
                    dataArray.push({
                        id: inputsCollection.custodio1.dataset.optionid,
                        value: inputsCollection.custodio1.value,
                        table: "User",
                        state: nothingConfig.userState.id,
                        title: "GUARDIA"
                    });
                    if (inputsCollection.weapon3.dataset.optionid != nothingConfig.nothingWeapon.id || inputsCollection.weapon3.value != "N/A [N/A]") {
                        dataArray.push({
                            id: inputsCollection.weapon3.dataset.optionid,
                            value: inputsCollection.weapon3.value,
                            table: "Weapon",
                            state: nothingConfig.weaponState.id,
                            title: "ARMA"
                        });
                    }
                }
                else {
                    inputsCollection.weapon3.dataset.optionid = nothingConfig.nothingWeapon.id;
                }
                if (inputsCollection.custodio2.dataset.optionid != nothingConfig.nothingUser.id || inputsCollection.custodio2.value != "N/A") {
                    dataArray.push({
                        id: inputsCollection.custodio2.dataset.optionid,
                        value: inputsCollection.custodio2.value,
                        table: "User",
                        state: nothingConfig.userState.id,
                        title: "GUARDIA"
                    });
                    if (inputsCollection.weapon4.dataset.optionid != nothingConfig.nothingWeapon.id || inputsCollection.weapon4.value != "N/A [N/A]") {
                        dataArray.push({
                            id: inputsCollection.weapon4.dataset.optionid,
                            value: inputsCollection.weapon4.value,
                            table: "Weapon",
                            state: nothingConfig.weaponState.id,
                            title: "ARMA"
                        });
                    }
                }
                else {
                    inputsCollection.weapon4.dataset.optionid = nothingConfig.nothingWeapon.id;
                }
                if (inputsCollection.custodio3.dataset.optionid != nothingConfig.nothingUser.id || inputsCollection.custodio3.value != "N/A") {
                    dataArray.push({
                        id: inputsCollection.custodio3.dataset.optionid,
                        value: inputsCollection.custodio3.value,
                        table: "User",
                        state: nothingConfig.userState.id,
                        title: "GUARDIA"
                    });
                    if (inputsCollection.weapon5.dataset.optionid != nothingConfig.nothingWeapon.id || inputsCollection.weapon5.value != "N/A [N/A]") {
                        dataArray.push({
                            id: inputsCollection.weapon5.dataset.optionid,
                            value: inputsCollection.weapon5.value,
                            table: "Weapon",
                            state: nothingConfig.weaponState.id,
                            title: "ARMA"
                        });
                    }
                }
                else {
                    inputsCollection.weapon5.dataset.optionid = nothingConfig.nothingWeapon.id;
                }
                let category = 0;
                dataArray.forEach((data) => {
                    if (data.table == "User")
                        category += 1;
                });
                const raw = JSON.stringify({
                    "name": `${inputsCollection.name.value.toUpperCase()}`,
                    "vehicular": {
                        "id": `${inputsCollection.vehicular.dataset.optionid}`
                    },
                    "crewState": {
                        "id": `${inputsCollection.state.dataset.optionid}`
                    },
                    "crewOne": {
                        "id": `${inputsCollection.supervisor.dataset.optionid}`
                    },
                    "crewTypeOne": `SUPERVISOR`,
                    "weaponOne": {
                        "id": `${inputsCollection.weapon1.dataset.optionid}`
                    },
                    "crewTwo": {
                        "id": `${inputsCollection.segundero.dataset.optionid}`
                    },
                    "crewTypeTwo": `SEGUNDERO`,
                    "weaponTwo": {
                        "id": `${inputsCollection.weapon2.dataset.optionid}`
                    },
                    "crewThree": {
                        "id": `${inputsCollection.custodio1.dataset.optionid}`
                    },
                    "crewTypeThree": `CUSTODIO`,
                    "weaponThree": {
                        "id": `${inputsCollection.weapon3.dataset.optionid}`
                    },
                    "crewFour": {
                        "id": `${inputsCollection.custodio2.dataset.optionid}`
                    },
                    "crewTypeFour": `CUSTODIO`,
                    "weaponFour": {
                        "id": `${inputsCollection.weapon4.dataset.optionid}`
                    },
                    "crewFive": {
                        "id": `${inputsCollection.custodio3.dataset.optionid}`
                    },
                    "crewTypeFive": `CUSTODIO`,
                    "weaponFive": {
                        "id": `${inputsCollection.weapon5.dataset.optionid}`
                    },
                    "category": `P${category}`,
                    "business": {
                        "id": `${businessId}`
                    },
                    'creationDate': `${currentDateTime().date}`,
                    'creationTime': `${currentDateTime().time}`,
                });
                let searchExist = await getSearch("name", inputsCollection.name.value.toUpperCase(), "Crew");
                if (inputsCollection.name.value === '' || inputsCollection.name.value === undefined) {
                    alert("¡Nombre vacío!");
                }
                else if (inputsCollection.vehicular.value === '' || inputsCollection.vehicular.value === undefined) {
                    alert("Vehículo no seleccionado!");
                }
                else if (inputsCollection.supervisor.value === '' || inputsCollection.supervisor.value === undefined) {
                    alert("¡Supervisor no seleccionado!");
                }
                else if (searchExist != undefined) {
                    alert("¡Patrulla ya existe!");
                }
                else {
                    dataArray.push({
                        id: inputsCollection.vehicular.dataset.optionid,
                        value: inputsCollection.vehicular.value,
                        table: "Vehicular",
                        state: nothingConfig.vehicularState.id,
                        title: "VEHÍCULO"
                    });
                    reg(raw, dataArray);
                }
            });
        };
        const reg = async (raw, dataArray) => {
            registerEntity(raw, 'Crew')
                .then((res) => {
                setTimeout(async () => {
                    //let data = await getWeapons()
                    let parse = JSON.parse(raw);
                    eventLog('INS', 'PATRULLA', `${parse.name}`, '');
                    dataArray.forEach((data) => {
                        getUpdateState(data.state, data.table, data.id);
                        let message = "";
                        if (data.table == "Vehicular") {
                            message = `${data.value} asignado a patrulla: ${parse.name}`;
                        }
                        else if (data.table == "User") {
                            if (data.id == parse.crewOne.id) {
                                message = `${data.value} asignado como supervisor, en patrulla: ${parse.name}`;
                            }
                            else if (data.id == parse.crewTwo.id) {
                                message = `${data.value} asignado como segundero, en patrulla: ${parse.name}`;
                            }
                            else if (data.id == parse.crewThree.id) {
                                message = `${data.value} asignado como custodio 1, en patrulla: ${parse.name}`;
                            }
                            else if (data.id == parse.crewFour.id) {
                                message = `${data.value} asignado como custodio 2, en patrulla: ${parse.name}`;
                            }
                            else if (data.id == parse.crewFive.id) {
                                message = `${data.value} asignado como custodio 3, en patrulla: ${parse.name}`;
                            }
                        }
                        else if (data.table == "Weapon") {
                            if (data.id == parse.weaponOne.id) {
                                message = `${data.value} asignado a supervisor, en patrulla: ${parse.name}`;
                            }
                            else if (data.id == parse.weaponTwo.id) {
                                message = `${data.value} asignado a segundero, en patrulla: ${parse.name}`;
                            }
                            else if (data.id == parse.weaponThree.id) {
                                message = `${data.value} asignado a custodio 1, en patrulla: ${parse.name}`;
                            }
                            else if (data.id == parse.weaponFour.id) {
                                message = `${data.value} asignado a custodio 2, en patrulla: ${parse.name}`;
                            }
                            else if (data.id == parse.weaponFive.id) {
                                message = `${data.value} asignado a custodio 3, en patrulla: ${parse.name}`;
                            }
                        }
                        eventLog('UPD', `${data.title}`, `${message}`, '');
                    });
                    const tableBody = document.getElementById('datatable-body');
                    const container = document.getElementById('entity-editor-container');
                    new CloseDialog().x(container);
                    new Crews().render(Config.offset, Config.currentPage, infoPage.search);
                    //new Clients().load(tableBody, currentPage, data)
                }, 1000);
            });
        };
    }
    edit(container, data) {
        // Edit entity
        const edit = document.querySelectorAll('#edit-entity');
        edit.forEach((edit) => {
            const entityId = edit.dataset.entityid;
            edit.addEventListener('click', () => {
                RInterface('Crew', entityId);
            });
        });
        const RInterface = async (entities, entityID) => {
            const data = await getEntityData(entities, entityID);
            const nothingConfig = {
                nothingUser: await getNothing("username", "N/A", "User"),
                nothingWeapon: await getNothing("name", "N/A", "Weapon"),
                userState: await getNothing("name", "Asignado", "UserState"),
                weaponState: await getNothing("name", "Asignado", "WeaponState"),
                vehicularState: await getNothing("name", "Asignado", "VehicularState"),
                userEnable: await getNothing("name", "Disponible", "UserState"),
                vehicularEnable: await getNothing("name", "Disponible", "VehicularState"),
                weaponEnable: await getNothing("name", "Disponible", "WeaponState")
            };
            this.entityDialogContainer.innerHTML = '';
            this.entityDialogContainer.style.display = 'flex';
            this.entityDialogContainer.innerHTML = `
                <div class="entity_editor" id="entity-editor">
                <div class="entity_editor_header">
                    <div class="user_info">
                    <div class="avatar"><i class="fa-regular fa-users"></i></div>
                    <h1 class="entity_editor_title">Editar <br><small>${data.name}</small></h1>
                    </div>

                    <button class="btn btn_close_editor" id="close"><i class="fa-solid fa-x"></i></button>
                </div>

                <!-- EDITOR BODY -->
                <div class="entity_editor_body">
                    <div class="material_input">
                    <input type="text" id="entity-name" class="input_filled" value="${data.name}" readonly>
                    <label for="entity-name">Nombre</label>
                    </div>

                    <div class="material_input">
                    <input type="text" id="entity-vehicle" class="input_filled" data-optionid="${data.vehicular.id}" value="${data.vehicular.type} [${data.vehicular.licensePlate}]" readonly>
                    <label for="entity-vehicle">Vehículo</label>
                    </div>

                    <div class="material_input_select">
                    <label for="entity-state">Estado</label>
                    <input type="text" id="entity-state" class="input_select" readonly placeholder="cargando...">
                    <div id="input-options" class="input_options">
                    </div>
                    </div>

                    <h3>Supervisor</h3>
                    <br>

                    
                    <div class="material_input">
                    <input type="text" id="entity-supervisor" class="input_filled" data-optionid="${data.crewOne.id}" value="${data.crewOne.username}">
                    <label for="entity-supervisor">Supervisor</label>
                    </div>
                    

                    <div class="material_input">
                    <input type="text" id="entity-weapon1" class="input_filled" data-optionid="${data.weaponOne.id}" value="${data.weaponOne.name} [${data.weaponOne.licensePlate}]">
                    <label for="entity-weapon1">Arma Supervisor</label>
                    <button id="delete-weapon1"><i class="fa-solid fa-trash"></i></button>
                    </div>

                    <h3>Segundero</h3>
                    <br>

                    <div class="material_input">
                    <input type="text" id="entity-segundero" class="input_filled" data-optionid="${data.crewTwo.id}" value="${data.crewTwo.username}">
                    <label for="entity-segundero">Segundero</label>
                    <button id="delete-segundero"><i class="fa-solid fa-trash"></i></button>
                    </div>

                    <div class="material_input">
                    <input type="text" id="entity-weapon2" class="input_filled" data-optionid="${data.weaponTwo.id}" value="${data.weaponTwo.name} [${data.weaponTwo.licensePlate}]">
                    <label for="entity-weapon2">Arma Segundero</label>
                    <button id="delete-weapon2"><i class="fa-solid fa-trash"></i></button>
                    </div>

                    <h3>Custodio 1</h3>
                    <br>

                    <div class="material_input">
                    <input type="text" id="entity-custodio1" class="input_filled" data-optionid="${data.crewThree.id}" value="${data.crewThree.username}">
                    <label for="entity-custodio1">Custodio 1</label>
                    <button id="delete-custodio1"><i class="fa-solid fa-trash"></i></button>
                    </div>

                    <div class="material_input">
                    <input type="text" id="entity-weapon3" class="input_filled" data-optionid="${data.weaponThree.id}" value="${data.weaponThree.name} [${data.weaponThree.licensePlate}]">
                    <label for="entity-weapon3">Arma Custodio 1</label>
                    <button id="delete-weapon3"><i class="fa-solid fa-trash"></i></button>
                    </div>

                    <h3>Custodio 2</h3>
                    <br>

                    <div class="material_input">
                    <input type="text" id="entity-custodio2" class="input_filled" data-optionid="${data.crewFour.id}" value="${data.crewFour.username}">
                    <label for="entity-custodio2">Custodio 2</label>
                    <button id="delete-custodio2"><i class="fa-solid fa-trash"></i></button>
                    </div>

                    <div class="material_input">
                    <input type="text" id="entity-weapon4" class="input_filled" data-optionid="${data.weaponFour.id}" value="${data.weaponFour.name} [${data.weaponFour.licensePlate}]">
                    <label for="entity-weapon4">Arma Custodio 2</label>
                    <button id="delete-weapon4"><i class="fa-solid fa-trash"></i></button>
                    </div>

                    <h3>Custodio 3</h3>
                    <br>

                    <div class="material_input">
                    <input type="text" id="entity-custodio3" class="input_filled" data-optionid="${data.crewFive.id}" value="${data.crewFive.username}">
                    <label for="entity-custodio3">Custodio 3</label>
                    <button id="delete-custodio3"><i class="fa-solid fa-trash"></i></button>
                    </div>

                    <div class="material_input">
                    <input type="text" id="entity-weapon5" class="input_filled" data-optionid="${data.weaponFive.id}" value="${data.weaponFive.name} [${data.weaponFive.licensePlate}]">
                    <label for="entity-weapon5">Arma Custodio 3</label>
                    <button id="delete-weapon5"><i class="fa-solid fa-trash"></i></button>
                    </div>

                    <div class="input_detail">
                        <label for="creation-date"><i class="fa-solid fa-calendar"></i></label>
                        <input type="date" id="creation-date" class="input_filled" value="${data.creationDate}" readonly>
                    </div>
                    <br>
                    <div class="input_detail">
                        <label for="creation-time"><i class="fa-solid fa-clock"></i></label>
                        <input type="time" id="creation-time" class="input_filled" value="${data.creationTime}" readonly>
                    </div>
                    <br>
                    <div class="input_detail">
                        <label for="log-user"><i class="fa-solid fa-user"></i></label>
                        <input type="text" id="log-user" class="input_filled"value="${data.createdBy}" readonly>
                    </div>

                </div>
                <!-- END EDITOR BODY -->

                <div class="entity_editor_footer">
                    <button class="btn btn_primary btn_widder" id="update-changes" style="display:${userPermissions().style};">Guardar</button>
                </div>
                </div>
            `;
            inputObserver();
            this.selectVehicle();
            this.selectUser('INS', nothingConfig, data);
            this.selectWeapon('INS', nothingConfig, data);
            this.selectDelete(nothingConfig);
            //inputSelect('Business', 'entity-citadel')
            //inputSelect('Crew', 'entity-customer')
            inputSelect('CrewState', 'entity-state', data.crewState.id);
            //inputSelect('Department', 'entity-department')
            //inputSelect('Business', 'entity-business')
            this.close();
            UUpdate(entityID, data, nothingConfig);
        };
        const UUpdate = async (entityId, data, nothingConfig) => {
            const updateButton = document.getElementById('update-changes');
            updateButton.addEventListener('click', async () => {
                const $value = {
                    name: document.getElementById('entity-name'),
                    vehicular: document.getElementById('entity-vehicle'),
                    state: document.getElementById('entity-state'),
                    supervisor: document.getElementById('entity-supervisor'),
                    segundero: document.getElementById('entity-segundero'),
                    custodio1: document.getElementById('entity-custodio1'),
                    custodio2: document.getElementById('entity-custodio2'),
                    custodio3: document.getElementById('entity-custodio3'),
                    weapon1: document.getElementById('entity-weapon1'),
                    weapon2: document.getElementById('entity-weapon2'),
                    weapon3: document.getElementById('entity-weapon3'),
                    weapon4: document.getElementById('entity-weapon4'),
                    weapon5: document.getElementById('entity-weapon5'),
                };
                let dataArray = [];
                let dataChangesArray = [];
                let category = 0;
                if ($value.vehicular.dataset.optionid != data.vehicular.id) {
                    dataArray.push({
                        id: $value.vehicular.dataset.optionid,
                        value: $value.vehicular.value,
                        table: "Vehicular",
                        state: nothingConfig.vehicularState.id,
                        title: "VEHÍCULO"
                    });
                    dataChangesArray.push({
                        id: data.vehicular.id,
                        value: `${data.vehicular.type} [${data.vehicular.licensePlate}]`,
                        table: "Vehicular",
                        state: nothingConfig.vehicularEnable.id,
                        title: "VEHÍCULO"
                    });
                }
                category += 1;
                if ($value.supervisor.dataset.optionid != data.crewOne.id) {
                    dataArray.push({
                        id: $value.supervisor.dataset.optionid,
                        value: $value.supervisor.value,
                        table: "User",
                        state: nothingConfig.userState.id,
                        title: "SUPERVISOR"
                    });
                    dataChangesArray.push({
                        id: data.crewOne.id,
                        value: data.crewOne.username,
                        table: "User",
                        state: nothingConfig.userEnable.id,
                        title: "SUPERVISOR"
                    });
                }
                if ($value.weapon1.dataset.optionid != data.weaponOne.id) {
                    if ($value.weapon1.dataset.optionid != nothingConfig.nothingWeapon.id || $value.weapon1.value != "N/A [N/A]") {
                        dataArray.push({
                            id: $value.weapon1.dataset.optionid,
                            value: $value.weapon1.value,
                            table: "Weapon",
                            state: nothingConfig.weaponState.id,
                            title: "ARMA"
                        });
                        if (data.weaponOne.id != nothingConfig.nothingWeapon.id) {
                            dataChangesArray.push({
                                id: data.weaponOne.id,
                                value: `${data.weaponOne.name} [${data.weaponOne.licensePlate}]`,
                                table: "Weapon",
                                state: nothingConfig.weaponEnable.id,
                                title: "ARMA"
                            });
                        }
                    }
                    else {
                        if (data.weaponOne.id != nothingConfig.nothingWeapon.id) {
                            dataChangesArray.push({
                                id: data.weaponOne.id,
                                value: `${data.weaponOne.name} [${data.weaponOne.licensePlate}]`,
                                table: "Weapon",
                                state: nothingConfig.weaponEnable.id,
                                title: "ARMA"
                            });
                        }
                    }
                }
                if ($value.segundero.dataset.optionid != nothingConfig.nothingUser.id || $value.segundero.value != "N/A") {
                    category += 1;
                    if ($value.segundero.dataset.optionid != data.crewTwo.id) {
                        dataArray.push({
                            id: $value.segundero.dataset.optionid,
                            value: $value.segundero.value,
                            table: "User",
                            state: nothingConfig.userState.id,
                            title: "GUARDIA"
                        });
                        if (data.crewTwo.id != nothingConfig.nothingUser.id) {
                            dataChangesArray.push({
                                id: data.crewTwo.id,
                                value: data.crewTwo.username,
                                table: "User",
                                state: nothingConfig.userEnable.id,
                                title: "GUARDIA"
                            });
                        }
                    }
                    if ($value.weapon2.dataset.optionid != data.weaponTwo.id) {
                        if ($value.weapon2.dataset.optionid != nothingConfig.nothingWeapon.id || $value.weapon2.value != "N/A [N/A]") {
                            dataArray.push({
                                id: $value.weapon2.dataset.optionid,
                                value: $value.weapon2.value,
                                table: "Weapon",
                                state: nothingConfig.weaponState.id,
                                title: "ARMA"
                            });
                            if (data.weaponTwo.id != nothingConfig.nothingWeapon.id) {
                                dataChangesArray.push({
                                    id: data.weaponTwo.id,
                                    value: `${data.weaponTwo.name} [${data.weaponTwo.licensePlate}]`,
                                    table: "Weapon",
                                    state: nothingConfig.weaponEnable.id,
                                    title: "ARMA"
                                });
                            }
                        }
                        else {
                            if (data.weaponTwo.id != nothingConfig.nothingWeapon.id) {
                                dataChangesArray.push({
                                    id: data.weaponTwo.id,
                                    value: `${data.weaponTwo.name} [${data.weaponTwo.licensePlate}]`,
                                    table: "Weapon",
                                    state: nothingConfig.weaponEnable.id,
                                    title: "ARMA"
                                });
                            }
                        }
                    }
                }
                else {
                    if (data.crewTwo.id != nothingConfig.nothingUser.id) {
                        dataChangesArray.push({
                            id: data.crewTwo.id,
                            value: data.crewTwo.username,
                            table: "User",
                            state: nothingConfig.userEnable.id,
                            title: "GUARDIA"
                        });
                    }
                    if (data.weaponTwo.id != nothingConfig.nothingWeapon.id) {
                        dataChangesArray.push({
                            id: data.weaponTwo.id,
                            value: `${data.weaponTwo.name} [${data.weaponTwo.licensePlate}]`,
                            table: "Weapon",
                            state: nothingConfig.weaponEnable.id,
                            title: "ARMA"
                        });
                    }
                    $value.weapon2.dataset.optionid = nothingConfig.nothingWeapon.id;
                    $value.weapon2.value = "N/A [N/A]";
                }
                if ($value.custodio1.dataset.optionid != nothingConfig.nothingUser.id || $value.custodio1.value != "N/A") {
                    category += 1;
                    if ($value.custodio1.dataset.optionid != data.crewThree.id) {
                        dataArray.push({
                            id: $value.custodio1.dataset.optionid,
                            value: $value.custodio1.value,
                            table: "User",
                            state: nothingConfig.userState.id,
                            title: "GUARDIA"
                        });
                        if (data.crewThree.id != nothingConfig.nothingUser.id) {
                            dataChangesArray.push({
                                id: data.crewThree.id,
                                value: data.crewThree.username,
                                table: "User",
                                state: nothingConfig.userEnable.id,
                                title: "GUARDIA"
                            });
                        }
                    }
                    if ($value.weapon3.dataset.optionid != data.weaponThree.id) {
                        if ($value.weapon3.dataset.optionid != nothingConfig.nothingWeapon.id || $value.weapon3.value != "N/A [N/A]") {
                            dataArray.push({
                                id: $value.weapon3.dataset.optionid,
                                value: $value.weapon3.value,
                                table: "Weapon",
                                state: nothingConfig.weaponState.id,
                                title: "ARMA"
                            });
                            if (data.weaponThree.id != nothingConfig.nothingWeapon.id) {
                                dataChangesArray.push({
                                    id: data.weaponThree.id,
                                    value: `${data.weaponThree.name} [${data.weaponThree.licensePlate}]`,
                                    table: "Weapon",
                                    state: nothingConfig.weaponEnable.id,
                                    title: "ARMA"
                                });
                            }
                        }
                        else {
                            if (data.weaponThree.id != nothingConfig.nothingWeapon.id) {
                                dataChangesArray.push({
                                    id: data.weaponThree.id,
                                    value: `${data.weaponThree.name} [${data.weaponThree.licensePlate}]`,
                                    table: "Weapon",
                                    state: nothingConfig.weaponEnable.id,
                                    title: "ARMA"
                                });
                            }
                        }
                    }
                }
                else {
                    if (data.crewThree.id != nothingConfig.nothingUser.id) {
                        dataChangesArray.push({
                            id: data.crewThree.id,
                            value: data.crewThree.username,
                            table: "User",
                            state: nothingConfig.userEnable.id,
                            title: "GUARDIA"
                        });
                    }
                    if (data.weaponThree.id != nothingConfig.nothingWeapon.id) {
                        dataChangesArray.push({
                            id: data.weaponThree.id,
                            value: `${data.weaponThree.name} [${data.weaponThree.licensePlate}]`,
                            table: "Weapon",
                            state: nothingConfig.weaponEnable.id,
                            title: "ARMA"
                        });
                    }
                    $value.weapon3.dataset.optionid = nothingConfig.nothingWeapon.id;
                    $value.weapon3.value = "N/A [N/A]";
                }
                if ($value.custodio2.dataset.optionid != nothingConfig.nothingUser.id || $value.custodio2.value != "N/A") {
                    category += 1;
                    if ($value.custodio2.dataset.optionid != data.crewFour.id) {
                        dataArray.push({
                            id: $value.custodio2.dataset.optionid,
                            value: $value.custodio2.value,
                            table: "User",
                            state: nothingConfig.userState.id,
                            title: "GUARDIA"
                        });
                        if (data.crewFour.id != nothingConfig.nothingUser.id) {
                            dataChangesArray.push({
                                id: data.crewFour.id,
                                value: data.crewFour.username,
                                table: "User",
                                state: nothingConfig.userEnable.id,
                                title: "GUARDIA"
                            });
                        }
                    }
                    if ($value.weapon4.dataset.optionid != data.weaponFour.id) {
                        if ($value.weapon4.dataset.optionid != nothingConfig.nothingWeapon.id || $value.weapon4.value != "N/A [N/A]") {
                            dataArray.push({
                                id: $value.weapon4.dataset.optionid,
                                value: $value.weapon4.value,
                                table: "Weapon",
                                state: nothingConfig.weaponState.id,
                                title: "ARMA"
                            });
                            if (data.weaponFour.id != nothingConfig.nothingWeapon.id) {
                                dataChangesArray.push({
                                    id: data.weaponFour.id,
                                    value: `${data.weaponFour.name} [${data.weaponFour.licensePlate}]`,
                                    table: "Weapon",
                                    state: nothingConfig.weaponEnable.id,
                                    title: "ARMA"
                                });
                            }
                        }
                        else {
                            if (data.weaponFour.id != nothingConfig.nothingWeapon.id) {
                                dataChangesArray.push({
                                    id: data.weaponThree.id,
                                    value: `${data.weaponFour.name} [${data.weaponFour.licensePlate}]`,
                                    table: "Weapon",
                                    state: nothingConfig.weaponEnable.id,
                                    title: "ARMA"
                                });
                            }
                        }
                    }
                }
                else {
                    if (data.crewFour.id != nothingConfig.nothingUser.id) {
                        dataChangesArray.push({
                            id: data.crewFour.id,
                            value: data.crewFour.username,
                            table: "User",
                            state: nothingConfig.userEnable.id,
                            title: "GUARDIA"
                        });
                    }
                    if (data.weaponFour.id != nothingConfig.nothingWeapon.id) {
                        dataChangesArray.push({
                            id: data.weaponFour.id,
                            value: `${data.weaponFour.name} [${data.weaponFour.licensePlate}]`,
                            table: "Weapon",
                            state: nothingConfig.weaponEnable.id,
                            title: "ARMA"
                        });
                    }
                    $value.weapon4.dataset.optionid = nothingConfig.nothingWeapon.id;
                    $value.weapon4.value = "N/A [N/A]";
                }
                if ($value.custodio3.dataset.optionid != nothingConfig.nothingUser.id || $value.custodio3.value != "N/A") {
                    category += 1;
                    if ($value.custodio3.dataset.optionid != data.crewFive.id) {
                        dataArray.push({
                            id: $value.custodio3.dataset.optionid,
                            value: $value.custodio3.value,
                            table: "User",
                            state: nothingConfig.userState.id,
                            title: "GUARDIA"
                        });
                        if (data.crewFive.id != nothingConfig.nothingUser.id) {
                            dataChangesArray.push({
                                id: data.crewFive.id,
                                value: data.crewFive.username,
                                table: "User",
                                state: nothingConfig.userEnable.id,
                                title: "GUARDIA"
                            });
                        }
                    }
                    if ($value.weapon5.dataset.optionid != data.weaponFive.id) {
                        if ($value.weapon5.dataset.optionid != nothingConfig.nothingWeapon.id || $value.weapon5.value != "N/A [N/A]") {
                            dataArray.push({
                                id: $value.weapon5.dataset.optionid,
                                value: $value.weapon5.value,
                                table: "Weapon",
                                state: nothingConfig.weaponState.id,
                                title: "ARMA"
                            });
                            if (data.weaponFive.id != nothingConfig.nothingWeapon.id) {
                                dataChangesArray.push({
                                    id: data.weaponFive.id,
                                    value: `${data.weaponFive.name} [${data.weaponFive.licensePlate}]`,
                                    table: "Weapon",
                                    state: nothingConfig.weaponEnable.id,
                                    title: "ARMA"
                                });
                            }
                        }
                        else {
                            if (data.weaponFive.id != nothingConfig.nothingWeapon.id) {
                                dataChangesArray.push({
                                    id: data.weaponThree.id,
                                    value: `${data.weaponFive.name} [${data.weaponFive.licensePlate}]`,
                                    table: "Weapon",
                                    state: nothingConfig.weaponEnable.id,
                                    title: "ARMA"
                                });
                            }
                        }
                    }
                }
                else {
                    if (data.crewFive.id != nothingConfig.nothingUser.id) {
                        dataChangesArray.push({
                            id: data.crewFive.id,
                            value: data.crewFive.username,
                            table: "User",
                            state: nothingConfig.userEnable.id,
                            title: "GUARDIA"
                        });
                    }
                    if (data.weaponFive.id != nothingConfig.nothingWeapon.id) {
                        dataChangesArray.push({
                            id: data.weaponFive.id,
                            value: `${data.weaponFive.name} [${data.weaponFive.licensePlate}]`,
                            table: "Weapon",
                            state: nothingConfig.weaponEnable.id,
                            title: "ARMA"
                        });
                    }
                    $value.weapon5.dataset.optionid = nothingConfig.nothingWeapon.id;
                    $value.weapon5.value = "N/A [N/A]";
                }
                let raw = JSON.stringify({
                    "name": `${$value.name.value.toUpperCase()}`,
                    "vehicular": {
                        "id": `${$value.vehicular.dataset.optionid}`
                    },
                    "crewState": {
                        "id": `${$value.state.dataset.optionid}`
                    },
                    "crewOne": {
                        "id": `${$value.supervisor.dataset.optionid}`
                    },
                    "crewTypeOne": `SUPERVISOR`,
                    "weaponOne": {
                        "id": `${$value.weapon1.dataset.optionid}`
                    },
                    "crewTwo": {
                        "id": `${$value.segundero.dataset.optionid}`
                    },
                    "crewTypeTwo": `SEGUNDERO`,
                    "weaponTwo": {
                        "id": `${$value.weapon2.dataset.optionid}`
                    },
                    "crewThree": {
                        "id": `${$value.custodio1.dataset.optionid}`
                    },
                    "crewTypeThree": `CUSTODIO`,
                    "weaponThree": {
                        "id": `${$value.weapon3.dataset.optionid}`
                    },
                    "crewFour": {
                        "id": `${$value.custodio2.dataset.optionid}`
                    },
                    "crewTypeFour": `CUSTODIO`,
                    "weaponFour": {
                        "id": `${$value.weapon4.dataset.optionid}`
                    },
                    "crewFive": {
                        "id": `${$value.custodio3.dataset.optionid}`
                    },
                    "crewTypeFive": `CUSTODIO`,
                    "weaponFive": {
                        "id": `${$value.weapon5.dataset.optionid}`
                    },
                    "category": `P${category}`,
                });
                let searchExist = [];
                searchExist[0] = 'none';
                if ($value.name.value.toUpperCase() != data.name) {
                    searchExist[1] = await getSearch("name", $value.name.value.toUpperCase(), "Crew");
                }
                if ($value.name.value === '' || $value.name.value === undefined) {
                    alert("¡Nombre vacío!");
                }
                else if ($value.vehicular.value === '' || $value.vehicular.value === undefined) {
                    alert("Vehículo no seleccionado!");
                }
                else if ($value.supervisor.value === '' || $value.supervisor.value === undefined) {
                    alert("¡Supervisor no seleccionado!");
                }
                else if (searchExist[1] != undefined || searchExist[0] != 'none') {
                    alert("Patrulla ya existe!");
                }
                else if (data.crewState.name == "En servicio") {
                    alert("No se puede editar una patrulla en servicio.");
                }
                else {
                    update(raw, dataArray, dataChangesArray);
                }
            });
            const update = (raw, dataArray, dataChangesArray) => {
                updateEntity('Crew', entityId, raw)
                    .then((res) => {
                    setTimeout(async () => {
                        let tableBody;
                        let container;
                        let data;
                        //data = await getWeapons()
                        let parse = JSON.parse(raw);
                        eventLog('UPD', 'PATRULLA', `${parse.name}`, '');
                        dataArray.forEach((crew) => {
                            getUpdateState(crew.state, crew.table, crew.id);
                            let message = "";
                            if (crew.table == "Vehicular") {
                                message = `${crew.value} asignado a patrulla: ${parse.name}`;
                            }
                            else if (crew.table == "User") {
                                if (crew.id == parse.crewOne.id) {
                                    message = `${crew.value} asignado como supervisor, en patrulla: ${parse.name}`;
                                }
                                else if (crew.id == parse.crewTwo.id) {
                                    message = `${crew.value} asignado como segundero, en patrulla: ${parse.name}`;
                                }
                                else if (crew.id == parse.crewThree.id) {
                                    message = `${crew.value} asignado como custodio 1, en patrulla: ${parse.name}`;
                                }
                                else if (crew.id == parse.crewFour.id) {
                                    message = `${crew.value} asignado como custodio 2, en patrulla: ${parse.name}`;
                                }
                                else if (crew.id == parse.crewFive.id) {
                                    message = `${crew.value} asignado como custodio 3, en patrulla: ${parse.name}`;
                                }
                            }
                            else if (crew.table == "Weapon") {
                                if (crew.id == parse.weaponOne.id) {
                                    message = `${crew.value} asignado a supervisor, en patrulla: ${parse.name}`;
                                }
                                else if (crew.id == parse.weaponTwo.id) {
                                    message = `${crew.value} asignado a segundero, en patrulla: ${parse.name}`;
                                }
                                else if (crew.id == parse.weaponThree.id) {
                                    message = `${crew.value} asignado a custodio 1, en patrulla: ${parse.name}`;
                                }
                                else if (crew.id == parse.weaponFour.id) {
                                    message = `${crew.value} asignado a custodio 2, en patrulla: ${parse.name}`;
                                }
                                else if (crew.id == parse.weaponFive.id) {
                                    message = `${crew.value} asignado a custodio 3, en patrulla: ${parse.name}`;
                                }
                            }
                            eventLog('UPD', `${crew.title}`, `${message}`, '');
                        });
                        //CHANGES
                        dataChangesArray.forEach((crew) => {
                            getUpdateState(crew.state, crew.table, crew.id);
                            let message = `${crew.value} disponible`;
                            eventLog('UPD', `${crew.title}`, `${message}`, '');
                        });
                        new CloseDialog()
                            .x(container =
                            document.getElementById('entity-editor-container'));
                        new Crews().render(infoPage.offset, infoPage.currentPage, infoPage.search);
                        /* new Clients().load(tableBody
                             = document.getElementById('datatable-body'),
                             currentPage,
                             data
                         )*/
                    }, 100);
                });
            };
        };
    }
    remove() {
        const remove = document.querySelectorAll('#remove-entity');
        remove.forEach((remove) => {
            const entityId = remove.dataset.entityid;
            const entityName = remove.dataset.entityname;
            // BOOKMARK: MODAL
            remove.addEventListener('click', () => {
                this.dialogContainer.style.display = 'block';
                this.dialogContainer.innerHTML = `
                    <div class="dialog_content" id="dialog-content">
                        <div class="dialog dialog_danger">
                        <div class="dialog_container">
                            <div class="dialog_header">
                            <h2>¿Deseas eliminar esta arma?</h2>
                            </div>

                            <div class="dialog_message">
                            <p>Esta acción no se puede revertir</p>
                            </div>

                            <div class="dialog_footer">
                            <button class="btn btn_primary" id="cancel">Cancelar</button>
                            <button class="btn btn_danger" id="delete">Eliminar</button>
                            </div>
                        </div>
                        </div>
                    </div>`;
                const deleteButton = document.getElementById('delete');
                const cancelButton = document.getElementById('cancel');
                const dialogContent = document.getElementById('dialog-content');
                deleteButton.onclick = async () => {
                    let nothingUser = await getNothing("username", "N/A", "User");
                    let nothingWeapon = await getNothing("name", "N/A", "Weapon");
                    let userState = await getNothing("name", "Disponible", "UserState");
                    let weaponState = await getNothing("name", "Disponible", "WeaponState");
                    let vehicularState = await getNothing("name", "Disponible", "VehicularState");
                    const data = await getEntityData('Crew', entityId);
                    if (data.crewState.name == "Disponible" || data.crewState.name == "No disponible") {
                        deleteEntity('Crew', entityId)
                            .then(async (res) => {
                            setTimeout(() => {
                                //let data = await getWeapons();
                                eventLog('DLT', 'PATRULLA', `${entityName}`, '');
                                if (data.vehicular.id) {
                                    getUpdateState(`${vehicularState.id}`, "Vehicular", `${data.vehicular.id}`);
                                    eventLog('UPD', `VEHÍCULO`, `${data.vehicular.type} [${data.vehicular.licensePlate}] disponible`, '');
                                }
                                if (data.crewOne.id != nothingUser.id || data.crewOne.username != "N/A") {
                                    getUpdateState(`${userState.id}`, "User", `${data.crewOne.id}`);
                                    eventLog('UPD', `SUPERVISOR`, `${data.crewOne.username} disponible`, '');
                                }
                                if (data.crewTwo.id != nothingUser.id || data.crewTwo.username != "N/A") {
                                    getUpdateState(`${userState.id}`, "User", `${data.crewTwo.id}`);
                                    eventLog('UPD', `GUARDIA`, `${data.crewTwo.username} disponible`, '');
                                }
                                if (data.crewThree.id != nothingUser.id || data.crewThree.username != "N/A") {
                                    getUpdateState(`${userState.id}`, "User", `${data.crewThree.id}`);
                                    eventLog('UPD', `GUARDIA`, `${data.crewThree.username} disponible`, '');
                                }
                                if (data.crewFour.id != nothingUser.id || data.crewFour.username != "N/A") {
                                    getUpdateState(`${userState.id}`, "User", `${data.crewFour.id}`);
                                    eventLog('UPD', `GUARDIA`, `${data.crewFour.username} disponible`, '');
                                }
                                if (data.crewFive.id != nothingUser.id || data.crewFive.username != "N/A") {
                                    getUpdateState(`${userState.id}`, "User", `${data.crewFive.id}`);
                                    eventLog('UPD', `GUARDIA`, `${data.crewFive.username} disponible`, '');
                                }
                                if (data.weaponOne.id != nothingWeapon.id || data.weaponOne.name != "N/A") {
                                    getUpdateState(`${weaponState.id}`, "Weapon", `${data.weaponOne.id}`);
                                    eventLog('UPD', `ARMA`, `${data.weaponOne.name} [${data.weaponOne.licensePlate}] disponible`, '');
                                }
                                if (data.weaponTwo.id != nothingWeapon.id || data.weaponTwo.name != "N/A") {
                                    getUpdateState(`${weaponState.id}`, "Weapon", `${data.weaponTwo.id}`);
                                    eventLog('UPD', `ARMA`, `${data.weaponTwo.name} [${data.weaponTwo.licensePlate}] disponible`, '');
                                }
                                if (data.weaponThree.id != nothingWeapon.id || data.weaponThree.name != "N/A") {
                                    getUpdateState(`${weaponState.id}`, "Weapon", `${data.weaponThree.id}`);
                                    eventLog('UPD', `ARMA`, `${data.weaponThree.name} [${data.weaponThree.licensePlate}] disponible`, '');
                                }
                                if (data.weaponFour.id != nothingWeapon.id || data.weaponFour.name != "N/A") {
                                    getUpdateState(`${weaponState.id}`, "Weapon", `${data.weaponFour.id}`);
                                    eventLog('UPD', `ARMA`, `${data.weaponFour.name} [${data.weaponFour.licensePlate}] disponible`, '');
                                }
                                if (data.weaponFive.id != nothingWeapon.id || data.weaponFive.name != "N/A") {
                                    getUpdateState(`${weaponState.id}`, "Weapon", `${data.weaponFive.id}`);
                                    eventLog('UPD', `ARMA`, `${data.weaponFive.name} [${data.weaponFive.licensePlate}] disponible`, '');
                                }
                                const tableBody = document.getElementById('datatable-body');
                                new CloseDialog().x(dialogContent);
                                new Crews().render(infoPage.offset, infoPage.currentPage, infoPage.search);
                                //new Clients().load(tableBody, currentPage, data);
                            }, 1000);
                        });
                    }
                    else {
                        alert("No se puede eliminar una patrulla en servicio.");
                    }
                };
                cancelButton.onclick = () => {
                    new CloseDialog().x(dialogContent);
                    //this.render()
                };
            });
        });
    }
    pagination(items, limitRows, currentPage) {
        const tableBody = document.getElementById('datatable-body');
        const paginationWrapper = document.getElementById('pagination-container');
        paginationWrapper.innerHTML = '';
        let pageCount;
        pageCount = Math.ceil(infoPage.count / limitRows);
        let button;
        if (pageCount <= Config.maxLimitPage) {
            for (let i = 1; i < pageCount + 1; i++) {
                button = setupButtons(i /*, items, currentPage, tableBody, limitRows*/);
                paginationWrapper.appendChild(button);
            }
            fillBtnPagination(currentPage, Config.colorPagination);
        }
        else {
            pagesOptions(items, currentPage);
        }
        function setupButtons(page /*, items: any, currentPage: number, tableBody: InterfaceElement, limitRows: number*/) {
            const button = document.createElement('button');
            button.classList.add('pagination_button');
            button.setAttribute("name", "pagination-button");
            button.setAttribute("id", "btnPag" + page);
            button.innerText = page;
            button.addEventListener('click', () => {
                infoPage.offset = Config.tableRows * (page - 1);
                currentPage = page;
                new Crews().render(infoPage.offset, currentPage, infoPage.search);
                //new Clients().load(tableBody, page, items)
            });
            return button;
        }
        function pagesOptions(items, currentPage) {
            paginationWrapper.innerHTML = '';
            let pages = pageNumbers(pageCount, Config.maxLimitPage, currentPage);
            const prevButton = document.createElement('button');
            prevButton.classList.add('pagination_button');
            prevButton.innerText = "<<";
            paginationWrapper.appendChild(prevButton);
            const nextButton = document.createElement('button');
            nextButton.classList.add('pagination_button');
            nextButton.innerText = ">>";
            for (let i = 0; i < pages.length; i++) {
                if (pages[i] > 0 && pages[i] <= pageCount) {
                    button = setupButtons(pages[i]);
                    paginationWrapper.appendChild(button);
                }
            }
            paginationWrapper.appendChild(nextButton);
            fillBtnPagination(currentPage, Config.colorPagination);
            setupButtonsEvents(prevButton, nextButton);
        }
        function setupButtonsEvents(prevButton, nextButton) {
            prevButton.addEventListener('click', () => {
                new Crews().render(Config.offset, Config.currentPage, infoPage.search);
            });
            nextButton.addEventListener('click', () => {
                infoPage.offset = Config.tableRows * (pageCount - 1);
                new Crews().render(infoPage.offset, pageCount, infoPage.search);
            });
        }
    }
    close() {
        const closeButton = document.getElementById('close');
        const editor = document.getElementById('entity-editor-container');
        closeButton.addEventListener('click', () => {
            new CloseDialog().x(editor);
        }, false);
    }
    selectVehicle() {
        const element = document.getElementById('entity-vehicle');
        //let offset = 0
        element.addEventListener('click', async () => {
            modalTable(0, "", "CAMIONETA");
        });
        async function modalTable(offset, search, type) {
            const dialogContainer = document.getElementById('app-dialogs');
            let raw = JSON.stringify({
                "filter": {
                    "conditions": [
                        {
                            "property": "business.id",
                            "operator": "=",
                            "value": `${businessId}`
                        },
                        {
                            "property": "vehicularState.name",
                            "operator": "=",
                            "value": `Disponible`
                        },
                        {
                            "property": "type",
                            "operator": "=",
                            "value": `${type}`
                        }
                    ],
                },
                sort: "-createdDate",
                limit: Config.modalRows,
                offset: offset,
                fetchPlan: 'full',
            });
            if (search != "") {
                raw = JSON.stringify({
                    "filter": {
                        "conditions": [
                            {
                                "group": "OR",
                                "conditions": [
                                    {
                                        "property": "licensePlate",
                                        "operator": "contains",
                                        "value": `${search.toLowerCase()}`
                                    }
                                ]
                            },
                            {
                                "property": "business.id",
                                "operator": "=",
                                "value": `${businessId}`
                            },
                            {
                                "property": "vehicularState.name",
                                "operator": "=",
                                "value": `Disponible`
                            },
                            {
                                "property": "type",
                                "operator": "=",
                                "value": `${type}`
                            }
                        ],
                    },
                    sort: "-createdDate",
                    limit: Config.modalRows,
                    offset: offset,
                    fetchPlan: 'full',
                });
            }
            let dataModal = await getFilterEntityData("Vehicular", raw);
            const FData = dataModal.filter((data) => data.id != element.dataset.optionid);
            dialogContainer.style.display = 'block';
            dialogContainer.innerHTML = `
                    <div class="dialog_content" id="dialog-content">
                        <div class="dialog">
                            <div class="dialog_container padding_8">
                                <div class="dialog_header">
                                    <h2>Vehículos disponibles</h2>
                                </div>

                                <div class="dialog_message padding_8">
                                    <div class="datatable_tools">
                                        <input type="search"
                                        class="search_input"
                                        placeholder="Buscar"
                                        id="search-modal">
                                        <select id="select">
                                            <option value="CAMIONETA" selected>CAMIONETA</option>
                                            <option value="AUTO">AUTO</option>
                                            <option value="MOTO">MOTO</option>
                                            <option value="LANCHA">LANCHA</option>
                                        </select>
                                        <button
                                            class="datatable_button add_user"
                                            id="btnSearchModal">
                                            <i class="fa-solid fa-search"></i>
                                        </button>
                                    </div>
                                    <div class="dashboard_datatable">
                                        <table class="datatable_content margin_t_16">
                                        <thead>
                                            <tr>
                                            <th>Placa</th>
                                            <th>Tipo</th>
                                            <th></th>
                                            </tr>
                                        </thead>
                                        <tbody id="datatable-modal-body">
                                        </tbody>
                                        </table>
                                    </div>
                                    <br>
                                </div>

                                <div class="dialog_footer">
                                    <button class="btn btn_primary" id="prevModal"><i class="fa-solid fa-arrow-left"></i></button>
                                    <button class="btn btn_primary" id="nextModal"><i class="fa-solid fa-arrow-right"></i></button>
                                    <button class="btn btn_danger" id="cancel">Cancelar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            inputObserver();
            const datetableBody = document.getElementById('datatable-modal-body');
            if (FData.length === 0) {
                let row = document.createElement('tr');
                row.innerHTML = `
                        <td>No hay datos</td>
                        <td></td>
                        <td></td>
                    `;
                datetableBody.appendChild(row);
            }
            else {
                for (let i = 0; i < FData.length; i++) {
                    let client = FData[i];
                    let row = document.createElement('tr');
                    row.innerHTML += `
                            <td>${client.licensePlate}</dt>
                            <td>${client?.type ?? ''}</dt>
                            <td class="entity_options">
                                <button class="button" id="edit-entity" data-entityId="${client.id}" data-entityName="${client.licensePlate}" data-entityType="${client.type}">
                                    <i class="fa-solid fa-arrow-up-right-from-square"></i>
                                </button>
                            </td>
                        `;
                    datetableBody.appendChild(row);
                    drawTagsIntoTables();
                }
            }
            const txtSearch = document.getElementById('search-modal');
            const _selectType = document.getElementById('select');
            const btnSearchModal = document.getElementById('btnSearchModal');
            const _selectVehicle = document.querySelectorAll('#edit-entity');
            const _closeButton = document.getElementById('cancel');
            const _dialog = document.getElementById('dialog-content');
            const prevModalButton = document.getElementById('prevModal');
            const nextModalButton = document.getElementById('nextModal');
            txtSearch.value = search ?? '';
            _selectType.value = type;
            _selectVehicle.forEach((edit) => {
                const entityId = edit.dataset.entityid;
                const entityName = edit.dataset.entityname;
                const entityType = edit.dataset.entitytype;
                edit.addEventListener('click', () => {
                    element.setAttribute('data-optionid', entityId);
                    element.setAttribute('value', `${entityType} [${entityName}]`);
                    element.classList.add('input_filled');
                    new CloseDialog().x(_dialog);
                });
            });
            btnSearchModal.onclick = () => {
                modalTable(0, txtSearch.value, _selectType.value);
            };
            _closeButton.onclick = () => {
                new CloseDialog().x(_dialog);
            };
            nextModalButton.onclick = () => {
                offset = Config.modalRows + (offset);
                modalTable(offset, search, _selectType.value);
            };
            prevModalButton.onclick = () => {
                offset = Config.modalRows - (offset);
                modalTable(offset, search, _selectType.value);
            };
        }
    }
    selectWeapon(acc, nothingConfig, crews) {
        const elements = {
            weapon1: document.getElementById('entity-weapon1'),
            weapon2: document.getElementById('entity-weapon2'),
            weapon3: document.getElementById('entity-weapon3'),
            weapon4: document.getElementById('entity-weapon4'),
            weapon5: document.getElementById('entity-weapon5')
        };
        elements.weapon1.addEventListener('click', async () => {
            modalTable(0, "", elements.weapon1);
        });
        elements.weapon2.addEventListener('click', async () => {
            modalTable(0, "", elements.weapon2);
        });
        elements.weapon3.addEventListener('click', async () => {
            modalTable(0, "", elements.weapon3);
        });
        elements.weapon4.addEventListener('click', async () => {
            modalTable(0, "", elements.weapon4);
        });
        elements.weapon5.addEventListener('click', async () => {
            modalTable(0, "", elements.weapon5);
        });
        const modalTable = async (offset, search, element) => {
            const dialogContainer = document.getElementById('app-dialogs');
            let raw = JSON.stringify({
                "filter": {
                    "conditions": [
                        {
                            "property": "business.id",
                            "operator": "=",
                            "value": `${businessId}`
                        },
                        {
                            "property": "weaponState.name",
                            "operator": "=",
                            "value": `Disponible`
                        }
                    ],
                },
                sort: "-createdDate",
                limit: Config.modalRows,
                offset: offset,
                fetchPlan: 'full',
            });
            if (search != "") {
                raw = JSON.stringify({
                    "filter": {
                        "conditions": [
                            {
                                "group": "OR",
                                "conditions": [
                                    {
                                        "property": "name",
                                        "operator": "contains",
                                        "value": `${search.toLowerCase()}`
                                    },
                                    {
                                        "property": "licensePlate",
                                        "operator": "contains",
                                        "value": `${search.toLowerCase()}`
                                    },
                                    {
                                        "property": "nroSerie",
                                        "operator": "contains",
                                        "value": `${search.toLowerCase()}`
                                    }
                                ]
                            },
                            {
                                "property": "business.id",
                                "operator": "=",
                                "value": `${businessId}`
                            },
                            {
                                "property": "weaponState.name",
                                "operator": "=",
                                "value": `Disponible`
                            }
                        ],
                    },
                    sort: "-createdDate",
                    limit: Config.modalRows,
                    offset: offset,
                    fetchPlan: 'full',
                });
            }
            let dataModal = await getFilterEntityData("Weapon", raw);
            const Fweapon1 = dataModal.filter((data) => data.id != elements.weapon1.dataset.optionid);
            const Fweapon2 = Fweapon1.filter((data) => data.id != elements.weapon2.dataset.optionid);
            const Fweapon3 = Fweapon2.filter((data) => data.id != elements.weapon3.dataset.optionid);
            const Fweapon4 = Fweapon3.filter((data) => data.id != elements.weapon4.dataset.optionid);
            const Fweapon5 = Fweapon4.filter((data) => data.id != elements.weapon5.dataset.optionid);
            dialogContainer.style.display = 'block';
            dialogContainer.innerHTML = `
                    <div class="dialog_content" id="dialog-content">
                        <div class="dialog">
                            <div class="dialog_container padding_8">
                                <div class="dialog_header">
                                    <h2>Armas disponibles</h2>
                                </div>

                                <div class="dialog_message padding_8">
                                    <div class="datatable_tools">
                                        <input type="search"
                                        class="search_input"
                                        placeholder="Buscar"
                                        id="search-modal">
                                        <button
                                            class="datatable_button add_user"
                                            id="btnSearchModal">
                                            <i class="fa-solid fa-search"></i>
                                        </button>
                                        <div id="listWeapon"></div>
                                    </div>
                                    <div class="dashboard_datatable">
                                        <table class="datatable_content margin_t_16">
                                        <thead>
                                            <tr>
                                            <th>Nombre</th>
                                            <th>Placa</th>
                                            <th>Serie</th>
                                            <th></th>
                                            </tr>
                                        </thead>
                                        <tbody id="datatable-modal-body">
                                        </tbody>
                                        </table>
                                    </div>
                                    <br>
                                </div>

                                <div class="dialog_footer">
                                    <button class="btn btn_primary" id="prevModal"><i class="fa-solid fa-arrow-left"></i></button>
                                    <button class="btn btn_primary" id="nextModal"><i class="fa-solid fa-arrow-right"></i></button>
                                    <button class="btn btn_danger" id="cancel">Cancelar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            inputObserver();
            const datetableBody = document.getElementById('datatable-modal-body');
            if (Fweapon5.length === 0) {
                let row = document.createElement('tr');
                row.innerHTML = `
                        <td>No hay datos</td>
                        <td></td>
                        <td></td>
                    `;
                datetableBody.appendChild(row);
            }
            else {
                for (let i = 0; i < Fweapon5.length; i++) {
                    let client = Fweapon5[i];
                    let row = document.createElement('tr');
                    row.innerHTML += `
                            <td>${client?.name ?? ''}</dt>
                            <td>${client?.licensePlate ?? ''}</dt>
                            <td>${client?.nroSerie ?? ''}</dt>
                            <td class="entity_options">
                                <button class="button" id="edit-entity" data-entityId="${client.id}" data-entityName="${client.name}" data-entityPlate="${client.licensePlate}">
                                    <i class="fa-solid fa-arrow-up-right-from-square"></i>
                                </button>
                            </td>
                        `;
                    datetableBody.appendChild(row);
                    drawTagsIntoTables();
                }
            }
            const txtSearch = document.getElementById('search-modal');
            const btnSearchModal = document.getElementById('btnSearchModal');
            const listWeapon = document.getElementById('listWeapon');
            const _selectUser = document.querySelectorAll('#edit-entity');
            const _closeButton = document.getElementById('cancel');
            const _dialog = document.getElementById('dialog-content');
            const prevModalButton = document.getElementById('prevModal');
            const nextModalButton = document.getElementById('nextModal');
            txtSearch.value = search ?? '';
            _selectUser.forEach((edit) => {
                const entityId = edit.dataset.entityid;
                const entityName = edit.dataset.entityname;
                const entityPlate = edit.dataset.entityplate;
                edit.addEventListener('click', () => {
                    element.setAttribute('data-optionid', entityId);
                    element.setAttribute('value', `${entityName} [${entityPlate}]`);
                    element.classList.add('input_filled');
                    new CloseDialog().x(_dialog);
                });
            });
            btnSearchModal.onclick = () => {
                modalTable(0, txtSearch.value, element);
            };
            _closeButton.onclick = () => {
                new CloseDialog().x(_dialog);
            };
            nextModalButton.onclick = () => {
                offset = Config.modalRows + (offset);
                modalTable(offset, search, element);
            };
            prevModalButton.onclick = () => {
                offset = Config.modalRows - (offset);
                modalTable(offset, search, element);
            };
            if (acc == 'UPD') {
                listWeapon.innerHTML = `
                    <button
                        class="datatable_button add_user"
                        id="btnListWeapon">
                        <i class="fa-solid fa-person-rifle"></i>
                    </button>
                    `;
                const btnListWeapon = document.getElementById('btnListWeapon');
                btnListWeapon.onclick = () => {
                    //new CloseDialog().x(_dialog)
                    this.weaponSelected(acc, nothingConfig, element, elements, crews);
                };
            }
        };
    }
    weaponSelected(acc, nothingConfig, element, elements, crews) {
        const dialogContainer = document.getElementById('app-dialogs');
        let title;
        let listWeaponsNews = [
            { info: elements.weapon1, rol: "Supervisor" },
            { info: elements.weapon2, rol: "Segundero" },
            { info: elements.weapon3, rol: "Custodio 1" },
            { info: elements.weapon4, rol: "Custodio 2" },
            { info: elements.weapon5, rol: "Custodio 3" }
        ];
        for (let i = 0; i < listWeaponsNews.length; i++) {
            if (element.id == listWeaponsNews[i].info.id)
                title = listWeaponsNews[i].rol;
        }
        dialogContainer.style.display = 'block';
        dialogContainer.innerHTML = `
                <div class="dialog_content" id="dialog-content">
                    <div class="dialog">
                        <div class="dialog_container padding_8">
                            <div class="dialog_header">
                                <h2>Guardias enlistados, arma: ${title}</h2>
                            </div>
    
                            <div class="dialog_message padding_8">
                                <div class="datatable_tools">
                                </div>
                                <div class="dashboard_datatable">
                                    <table class="datatable_content margin_t_16">
                                    <thead>
                                        <tr>
                                        <th>Puesto</th>
                                        <th>Arma</th>
                                        <th></th>
                                        </tr>
                                    </thead>
                                    <tbody id="datatable-modal-body">
                                    </tbody>
                                    </table>
                                </div>
                                <br>
                            </div>
    
                            <div class="dialog_footer">
                                <button class="btn btn_danger" id="cancel">Cancelar</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        inputObserver();
        const datetableBody = document.getElementById('datatable-modal-body');
        let row = document.createElement('tr');
        row.innerHTML += `
                    <td style="color:green;">* Armas y roles asignados inicialmente *</td>
                    `;
        datetableBody.appendChild(row);
        let listWeapons = [
            { info: crews?.weaponOne, rol: "Supervisor" },
            { info: crews?.weaponTwo, rol: "Segundero" },
            { info: crews?.weaponThree, rol: "Custodio 1" },
            { info: crews?.weaponFour, rol: "Custodio 2" },
            { info: crews?.weaponFive, rol: "Custodio 3" }
        ];
        for (let i = 0; i < listWeapons.length; i++) {
            let crew = listWeapons[i];
            if (crew.info.id != nothingConfig.nothingWeapon.id) {
                row = document.createElement('tr');
                row.innerHTML += `
                        <td>${crew.rol}</td>
                        <td>${crew.info.name} [${crew.info.licensePlate}]</td>
                        <td class="entity_options">
                            <button class="button" id="edit-entity" data-entityId="${crew.info.id}" data-entityName="${crew.info.name} [${crew.info.licensePlate}]">
                                <i class="fa-solid fa-arrow-up-right-from-square"></i>
                            </button>
                        </td>
                    `;
                datetableBody.appendChild(row);
            }
        }
        row = document.createElement('tr');
        row.innerHTML += `
                <td style="color:blue;">* Nuevas armas y roles seleccionados *</td>
                `;
        datetableBody.appendChild(row);
        for (let i = 0; i < listWeaponsNews.length; i++) {
            let crew = listWeapons[i];
            let crewNew = listWeaponsNews[i];
            if (crewNew.info.dataset.optionid != crew.info.id) {
                if (crewNew.info.dataset.optionid != nothingConfig.nothingWeapon.id) {
                    row = document.createElement('tr');
                    row.innerHTML += `
                            <td>${crewNew.rol}</dt>
                            <td>${crewNew.info.value}</dt>
                            <td class="entity_options">
                                <button class="button" id="edit-entity" data-entityId="${crewNew.info.dataset.optionid}" data-entityName="${crewNew.info.value}">
                                    <i class="fa-solid fa-arrow-up-right-from-square"></i>
                                </button>
                            </td>
                        `;
                    datetableBody.appendChild(row);
                }
            }
        }
        const _selectUser = document.querySelectorAll('#edit-entity');
        const _closeButton = document.getElementById('cancel');
        const _dialog = document.getElementById('dialog-content');
        _selectUser.forEach((edit) => {
            const entityId = edit.dataset.entityid;
            const entityName = edit.dataset.entityname;
            const entityPlate = edit.dataset.entityplate;
            console.log(entityName);
            edit.addEventListener('click', () => {
                if (element.dataset.optionid != entityId) {
                    for (let i = 0; i < listWeaponsNews.length; i++) {
                        let crewNew = listWeaponsNews[i];
                        if (crewNew.info.dataset.optionid == entityId) {
                            crewNew.info.setAttribute('data-optionid', nothingConfig.nothingWeapon.id);
                            crewNew.info.setAttribute('value', `${nothingConfig.nothingWeapon.name} [${nothingConfig.nothingWeapon.licensePlate}]`);
                            crewNew.info.classList.add('input_filled');
                        }
                    }
                    element.setAttribute('data-optionid', entityId);
                    element.setAttribute('value', `${entityName}`);
                    element.classList.add('input_filled');
                }
                new CloseDialog().x(_dialog);
            });
        });
        _closeButton.onclick = () => {
            new CloseDialog().x(_dialog);
        };
    }
    selectUser(acc, nothingConfig, crews) {
        const elements = {
            supervisor: document.getElementById('entity-supervisor'),
            segundero: document.getElementById('entity-segundero'),
            custodio1: document.getElementById('entity-custodio1'),
            custodio2: document.getElementById('entity-custodio2'),
            custodio3: document.getElementById('entity-custodio3')
        };
        elements.supervisor.addEventListener('click', async () => {
            modalTable(0, "", elements.supervisor, true);
        });
        elements.segundero.addEventListener('click', async () => {
            modalTable(0, "", elements.segundero, false);
        });
        elements.custodio1.addEventListener('click', async () => {
            modalTable(0, "", elements.custodio1, false);
        });
        elements.custodio2.addEventListener('click', async () => {
            modalTable(0, "", elements.custodio2, false);
        });
        elements.custodio3.addEventListener('click', async () => {
            modalTable(0, "", elements.custodio3, false);
        });
        const modalTable = async (offset, search, element, isSupervisor) => {
            const dialogContainer = document.getElementById('app-dialogs');
            let raw = JSON.stringify({
                "filter": {
                    "conditions": [
                        {
                            "property": "business.id",
                            "operator": "=",
                            "value": `${businessId}`
                        },
                        {
                            "property": "userState.name",
                            "operator": "=",
                            "value": `Disponible`
                        },
                        {
                            "property": "userType",
                            "operator": "=",
                            "value": `GUARD`
                        },
                        {
                            "property": "isSupervisor",
                            "operator": "=",
                            "value": `${isSupervisor}`
                        },
                    ],
                },
                sort: "-createdDate",
                limit: Config.modalRows,
                offset: offset,
                fetchPlan: 'full',
            });
            if (search != "") {
                raw = JSON.stringify({
                    "filter": {
                        "conditions": [
                            {
                                "group": "OR",
                                "conditions": [
                                    {
                                        "property": "firstName",
                                        "operator": "contains",
                                        "value": `${search.toLowerCase()}`
                                    },
                                    {
                                        "property": "lastName",
                                        "operator": "contains",
                                        "value": `${search.toLowerCase()}`
                                    },
                                    {
                                        "property": "secondLastName",
                                        "operator": "contains",
                                        "value": `${search.toLowerCase()}`
                                    },
                                    {
                                        "property": "username",
                                        "operator": "contains",
                                        "value": `${search.toLowerCase()}`
                                    },
                                    {
                                        "property": "dni",
                                        "operator": "contains",
                                        "value": `${search.toLowerCase()}`
                                    }
                                ]
                            },
                            {
                                "property": "business.id",
                                "operator": "=",
                                "value": `${businessId}`
                            },
                            {
                                "property": "userState.name",
                                "operator": "=",
                                "value": `Disponible`
                            },
                            {
                                "property": "userType",
                                "operator": "=",
                                "value": `GUARD`
                            },
                            {
                                "property": "isSupervisor",
                                "operator": "=",
                                "value": `${isSupervisor}`
                            },
                        ],
                    },
                    sort: "-createdDate",
                    limit: Config.modalRows,
                    offset: offset,
                    fetchPlan: 'full',
                });
            }
            let dataModal = await getFilterEntityData("User", raw);
            const FSuper = dataModal.filter((data) => data.id != elements.supervisor.dataset.optionid);
            const FSegun = FSuper.filter((data) => data.id != elements.segundero.dataset.optionid);
            const FCust1 = FSegun.filter((data) => data.id != elements.custodio1.dataset.optionid);
            const FCust2 = FCust1.filter((data) => data.id != elements.custodio2.dataset.optionid);
            const FCust3 = FCust2.filter((data) => data.id != elements.custodio3.dataset.optionid);
            dialogContainer.style.display = 'block';
            dialogContainer.innerHTML = `
                    <div class="dialog_content" id="dialog-content">
                        <div class="dialog">
                            <div class="dialog_container padding_8">
                                <div class="dialog_header">
                                    <h2 id="modalTitle">Guardias disponibles</h2>
                                </div>

                                <div class="dialog_message padding_8">
                                    <div class="datatable_tools">
                                        <input type="search"
                                        class="search_input"
                                        placeholder="Buscar"
                                        id="search-modal">
                                        <button
                                            class="datatable_button add_user"
                                            id="btnSearchModal">
                                            <i class="fa-solid fa-search"></i>
                                        </button>
                                        <div id="listUser"></div>
                                    </div>
                                    <div class="dashboard_datatable">
                                        <table class="datatable_content margin_t_16">
                                        <thead>
                                            <tr>
                                            <th>Nombre</th>
                                            <th>Usuario</th>
                                            <th>DNI</th>
                                            <th></th>
                                            </tr>
                                        </thead>
                                        <tbody id="datatable-modal-body">
                                        </tbody>
                                        </table>
                                    </div>
                                    <br>
                                </div>

                                <div class="dialog_footer">
                                    <button class="btn btn_primary" id="prevModal"><i class="fa-solid fa-arrow-left"></i></button>
                                    <button class="btn btn_primary" id="nextModal"><i class="fa-solid fa-arrow-right"></i></button>
                                    <button class="btn btn_danger" id="cancel">Cancelar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            inputObserver();
            const datetableBody = document.getElementById('datatable-modal-body');
            if (FCust3.length === 0) {
                let row = document.createElement('tr');
                row.innerHTML = `
                        <td>No hay datos</td>
                        <td></td>
                        <td></td>
                    `;
                datetableBody.appendChild(row);
            }
            else {
                for (let i = 0; i < FCust3.length; i++) {
                    let client = FCust3[i];
                    let row = document.createElement('tr');
                    row.innerHTML += `
                            <td>${client?.firstName ?? ''} ${client?.lastName ?? ''} ${client?.secondLastName ?? ''}</td>
                            <td>${client?.username ?? ''}</td>
                            <td>${client?.dni ?? ''}</td>
                            <td class="entity_options">
                                <button class="button" id="edit-entity" data-entityId="${client.id}" data-entityName="${client.username}">
                                    <i class="fa-solid fa-arrow-up-right-from-square"></i>
                                </button>
                            </td>
                        `;
                    datetableBody.appendChild(row);
                    drawTagsIntoTables();
                }
            }
            const modalTitle = document.getElementById('modalTitle');
            const txtSearch = document.getElementById('search-modal');
            const btnSearchModal = document.getElementById('btnSearchModal');
            const listUser = document.getElementById('listUser');
            const _selectUser = document.querySelectorAll('#edit-entity');
            const _closeButton = document.getElementById('cancel');
            const _dialog = document.getElementById('dialog-content');
            const prevModalButton = document.getElementById('prevModal');
            const nextModalButton = document.getElementById('nextModal');
            txtSearch.value = search ?? '';
            if (isSupervisor)
                modalTitle.innerText = "Supervisores Disponibles";
            _selectUser.forEach((edit) => {
                const entityId = edit.dataset.entityid;
                const entityName = edit.dataset.entityname;
                edit.addEventListener('click', () => {
                    element.setAttribute('data-optionid', entityId);
                    element.setAttribute('value', `${entityName}`);
                    element.classList.add('input_filled');
                    new CloseDialog().x(_dialog);
                });
            });
            btnSearchModal.onclick = () => {
                modalTable(0, txtSearch.value, element, isSupervisor);
            };
            _closeButton.onclick = () => {
                new CloseDialog().x(_dialog);
            };
            nextModalButton.onclick = () => {
                offset = Config.modalRows + (offset);
                modalTable(offset, search, element, isSupervisor);
            };
            prevModalButton.onclick = () => {
                offset = Config.modalRows - (offset);
                modalTable(offset, search, element, isSupervisor);
            };
            if (acc == 'UPD') {
                listUser.innerHTML = `
                    <button
                        class="datatable_button add_user"
                        id="btnListUser">
                        <i class="fa-solid fa-user-check"></i>
                    </button>
                    `;
                const btnListUser = document.getElementById('btnListUser');
                btnListUser.onclick = () => {
                    //new CloseDialog().x(_dialog)
                    this.userSelected(acc, nothingConfig, element, elements, crews);
                };
            }
        };
    }
    userSelected(acc, nothingConfig, element, elements, crews) {
        const dialogContainer = document.getElementById('app-dialogs');
        let title;
        let listCrewsNews = [
            { info: elements.segundero, rol: "Segundero" },
            { info: elements.custodio1, rol: "Custodio 1" },
            { info: elements.custodio2, rol: "Custodio 2" },
            { info: elements.custodio3, rol: "Custodio 3" }
        ];
        for (let i = 0; i < listCrewsNews.length; i++) {
            if (element.id == listCrewsNews[i].info.id)
                title = listCrewsNews[i].rol;
        }
        dialogContainer.style.display = 'block';
        dialogContainer.innerHTML = `
                <div class="dialog_content" id="dialog-content">
                    <div class="dialog">
                        <div class="dialog_container padding_8">
                            <div class="dialog_header">
                                <h2>Guardias enlistados, puesto: ${title}</h2>
                            </div>
    
                            <div class="dialog_message padding_8">
                                <div class="datatable_tools">
                                </div>
                                <div class="dashboard_datatable">
                                    <table class="datatable_content margin_t_16">
                                    <thead>
                                        <tr>
                                        <th>Puesto</th>
                                        <th>Usuario</th>
                                        <th></th>
                                        </tr>
                                    </thead>
                                    <tbody id="datatable-modal-body">
                                    </tbody>
                                    </table>
                                </div>
                                <br>
                            </div>
    
                            <div class="dialog_footer">
                                <button class="btn btn_danger" id="cancel">Cancelar</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        inputObserver();
        const datetableBody = document.getElementById('datatable-modal-body');
        let row = document.createElement('tr');
        row.innerHTML += `
                    <td style="color:green;">* Guardias y roles asignados inicialmente *</td>
                    `;
        datetableBody.appendChild(row);
        let listCrews = [
            { info: crews?.crewTwo, rol: "Segundero" },
            { info: crews?.crewThree, rol: "Custodio 1" },
            { info: crews?.crewFour, rol: "Custodio 2" },
            { info: crews?.crewFive, rol: "Custodio 3" }
        ];
        for (let i = 0; i < listCrews.length; i++) {
            let crew = listCrews[i];
            if (crew.info.id != nothingConfig.nothingUser.id) {
                row = document.createElement('tr');
                row.innerHTML += `
                        <td>${crew.rol}</td>
                        <td>${crew.info.username}</td>
                        <td class="entity_options">
                            <button class="button" id="edit-entity" data-entityId="${crew.info.id}" data-entityName="${crew.info.username}">
                                <i class="fa-solid fa-arrow-up-right-from-square"></i>
                            </button>
                        </td>
                    `;
                datetableBody.appendChild(row);
            }
        }
        row = document.createElement('tr');
        row.innerHTML += `
                <td style="color:blue;">* Nuevos guardias y roles seleccionados *</td>
                `;
        datetableBody.appendChild(row);
        for (let i = 0; i < listCrewsNews.length; i++) {
            let crew = listCrews[i];
            let crewNew = listCrewsNews[i];
            if (crewNew.info.dataset.optionid != crew.info.id) {
                if (crewNew.info.dataset.optionid != nothingConfig.nothingUser.id) {
                    row = document.createElement('tr');
                    row.innerHTML += `
                            <td>${crewNew.rol}</dt>
                            <td>${crewNew.info.value}</dt>
                            <td class="entity_options">
                                <button class="button" id="edit-entity" data-entityId="${crewNew.info.dataset.optionid}" data-entityName="${crewNew.info.value}">
                                    <i class="fa-solid fa-arrow-up-right-from-square"></i>
                                </button>
                            </td>
                        `;
                    datetableBody.appendChild(row);
                }
            }
        }
        const _selectUser = document.querySelectorAll('#edit-entity');
        const _closeButton = document.getElementById('cancel');
        const _dialog = document.getElementById('dialog-content');
        _selectUser.forEach((edit) => {
            const entityId = edit.dataset.entityid;
            const entityName = edit.dataset.entityname;
            edit.addEventListener('click', () => {
                if (element.dataset.optionid != entityId) {
                    for (let i = 0; i < listCrewsNews.length; i++) {
                        let crewNew = listCrewsNews[i];
                        if (crewNew.info.dataset.optionid == entityId) {
                            crewNew.info.setAttribute('data-optionid', nothingConfig.nothingUser.id);
                            crewNew.info.setAttribute('value', `${nothingConfig.nothingUser.username}`);
                            crewNew.info.classList.add('input_filled');
                        }
                    }
                    element.setAttribute('data-optionid', entityId);
                    element.setAttribute('value', `${entityName}`);
                    element.classList.add('input_filled');
                }
                new CloseDialog().x(_dialog);
            });
        });
        _closeButton.onclick = () => {
            new CloseDialog().x(_dialog);
        };
    }
    selectDelete(nothingConfig) {
        const inputs = {
            segundero: document.getElementById('entity-segundero'),
            custodio1: document.getElementById('entity-custodio1'),
            custodio2: document.getElementById('entity-custodio2'),
            custodio3: document.getElementById('entity-custodio3'),
            weapon1: document.getElementById('entity-weapon1'),
            weapon2: document.getElementById('entity-weapon2'),
            weapon3: document.getElementById('entity-weapon3'),
            weapon4: document.getElementById('entity-weapon4'),
            weapon5: document.getElementById('entity-weapon5'),
        };
        const deletes = {
            segundero: document.getElementById('delete-segundero'),
            custodio1: document.getElementById('delete-custodio1'),
            custodio2: document.getElementById('delete-custodio2'),
            custodio3: document.getElementById('delete-custodio3'),
            weapon1: document.getElementById('delete-weapon1'),
            weapon2: document.getElementById('delete-weapon2'),
            weapon3: document.getElementById('delete-weapon3'),
            weapon4: document.getElementById('delete-weapon4'),
            weapon5: document.getElementById('delete-weapon5'),
        };
        deletes.weapon1.addEventListener('click', async () => {
            inputs.weapon1.value = `${nothingConfig.nothingWeapon.name} [${nothingConfig.nothingWeapon.licensePlate}]`;
            inputs.weapon1.dataset.optionid = nothingConfig.nothingWeapon.id;
        });
        deletes.segundero.addEventListener('click', async () => {
            inputs.segundero.value = nothingConfig.nothingUser.username;
            inputs.segundero.dataset.optionid = nothingConfig.nothingUser.id;
        });
        deletes.weapon2.addEventListener('click', async () => {
            inputs.weapon2.value = `${nothingConfig.nothingWeapon.name} [${nothingConfig.nothingWeapon.licensePlate}]`;
            inputs.weapon2.dataset.optionid = nothingConfig.nothingWeapon.id;
        });
        deletes.custodio1.addEventListener('click', async () => {
            inputs.custodio1.value = nothingConfig.nothingUser.username;
            inputs.custodio1.dataset.optionid = nothingConfig.nothingUser.id;
        });
        deletes.weapon3.addEventListener('click', async () => {
            inputs.weapon3.value = `${nothingConfig.nothingWeapon.name} [${nothingConfig.nothingWeapon.licensePlate}]`;
            inputs.weapon3.dataset.optionid = nothingConfig.nothingWeapon.id;
        });
        deletes.custodio2.addEventListener('click', async () => {
            inputs.custodio2.value = nothingConfig.nothingUser.username;
            inputs.custodio2.dataset.optionid = nothingConfig.nothingUser.id;
        });
        deletes.weapon4.addEventListener('click', async () => {
            inputs.weapon4.value = `${nothingConfig.nothingWeapon.name} [${nothingConfig.nothingWeapon.licensePlate}]`;
            inputs.weapon4.dataset.optionid = nothingConfig.nothingWeapon.id;
        });
        deletes.custodio3.addEventListener('click', async () => {
            inputs.custodio3.value = nothingConfig.nothingUser.username;
            inputs.custodio3.dataset.optionid = nothingConfig.nothingUser.id;
        });
        deletes.weapon5.addEventListener('click', async () => {
            inputs.weapon5.value = `${nothingConfig.nothingWeapon.name} [${nothingConfig.nothingWeapon.licensePlate}]`;
            inputs.weapon5.dataset.optionid = nothingConfig.nothingWeapon.id;
        });
    }
}
